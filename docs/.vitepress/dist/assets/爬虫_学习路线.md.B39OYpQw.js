import{_ as a,c as s,o as i,aS as l}from"./chunks/framework.CXxUOppd.js";const E=JSON.parse('{"title":"爬虫学习路线","description":"","frontmatter":{},"headers":[],"relativePath":"爬虫/学习路线.md","filePath":"爬虫/学习路线.md","lastUpdated":1713000536000}'),e={name:"爬虫/学习路线.md"},t=l(`<h1 id="爬虫学习路线" tabindex="-1">爬虫学习路线 <a class="header-anchor" href="#爬虫学习路线" aria-label="Permalink to &quot;爬虫学习路线&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">路线从哪里来的？</p><p>哪有什么学习路线？ 不过是大佬们水群吹牛的附带产物罢了~</p><p>大佬每水群一句，我就copy一句，于是有了这篇学习路线</p></div><div class="tip custom-block"><p class="custom-block-title">《吹》</p><p>我把大佬们的聊天记录反复观看，仔细揣摩</p><p>歪歪扭扭，话外有话，</p><p>怎么面试？</p><p>吹就完了</p></div><h2 id="待整理" tabindex="-1">待整理 <a class="header-anchor" href="#待整理" aria-label="Permalink to &quot;待整理&quot;">​</a></h2><h3 id="dp【drissionpage】" tabindex="-1">dp【DrissionPage】 <a class="header-anchor" href="#dp【drissionpage】" aria-label="Permalink to &quot;dp【DrissionPage】&quot;">​</a></h3><p>DP是基于cdp的，学习cdp可以看官方文档，配合沉浸式翻译。</p><p><a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noreferrer">https://chromedevtools.github.io/devtools-protocol/</a></p><p>dp目前没有检测办法吧，就相当于手动控制台调试</p><p>硬要检测的话，我觉得不是不可以，cdp协议本身没有鉴权，只要开了就能直接访问到</p><p>指纹检测网站：</p><p><a href="https://www.browserscan.net/" target="_blank" rel="noreferrer">https://www.browserscan.net/</a></p><p>frida hook原理 Xposed的hook原理.</p><p>in line hook 是干啥的.</p><p>搞了什么App 干了什么js</p><p>App 现在有什么常用的 检测方案 反调试方案</p><p>ptrace TracerPid 特征检测 什么几个 frida 关键字啊 端口啊</p><p>然后常用的几个汇编指令 B指令 add治理 bl指令 BX指令 然后吹一吹 unidbg 是吧. ida的快捷键</p><h1 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h1><p>问js 就吹一下 ast啊</p><p>然后看看vpm啊</p><p>分布式爬虫啊..</p><p>日采集 几百万 几千万数据什么的.</p><p>阿卡麦 PX 这种的吧.</p><p>5S 阿卡麦 3年前就写成纯C代码了</p><p>点选验证码的地址有时候是点选，有时候会变成旋转，估计是异常等级不同导致的</p><p>浏览器指纹，指纹浏览器</p><p>安卓逆向面试题汇总 技术篇 面试官经常问的几个问题如下：</p><p>常见的加固手段有哪些 安卓反调试一般有哪些手段，怎么去防范 arm汇编 b bl bx blx 这些指令是什么意思 ida xx操作的快捷键是哪个？ Xposed hook 原理 frida hook 原理 inline hook原理 ollvm 代码混淆你了解吗？要怎么去处理</p><h1 id="js逆向目录" tabindex="-1">JS逆向目录 <a class="header-anchor" href="#js逆向目录" aria-label="Permalink to &quot;JS逆向目录&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>下面的所有技术，名词，你最好要深入思考，为什么要有这项技术，它的好处是什么，想要解决什么问题？又要如何应对,你会应对吗.</p></div><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><h2 id="科普" tabindex="-1">科普 <a class="header-anchor" href="#科普" aria-label="Permalink to &quot;科普&quot;">​</a></h2><h3 id="所见即所得" tabindex="-1">所见即所得 <a class="header-anchor" href="#所见即所得" aria-label="Permalink to &quot;所见即所得&quot;">​</a></h3><h2 id="基础环境搭建" tabindex="-1">基础环境搭建 <a class="header-anchor" href="#基础环境搭建" aria-label="Permalink to &quot;基础环境搭建&quot;">​</a></h2><h2 id="js-nodejs" tabindex="-1">JS/NodeJs <a class="header-anchor" href="#js-nodejs" aria-label="Permalink to &quot;JS/NodeJs&quot;">​</a></h2><h2 id="前端" tabindex="-1">前端 <a class="header-anchor" href="#前端" aria-label="Permalink to &quot;前端&quot;">​</a></h2><h4 id="url编码" tabindex="-1">url编码 <a class="header-anchor" href="#url编码" aria-label="Permalink to &quot;url编码&quot;">​</a></h4><p>URL编码（也称为百分号编码或URL转义）是一种用于在URL中表示特殊字符和非ASCII字符的编码方式。由于URL只允许特定的字符，因此如果要包含特殊字符或非ASCII字符（例如空格、问号、斜杠、中文字符等），就需要对其进行编码，以便在URL中安全地传输和解析。</p><p>URL编码的原理是将要编码的字符转换为 <code>%</code> 符号后跟两位十六进制数的形式。例如，空格字符会被编码为 <code>%20</code>，问号字符会被编码为 <code>%3F</code>，而中文字符会被分解为其UTF-8编码的字节序列，然后每个字节以 <code>%</code> 符号后跟两位十六进制数的形式进行编码。</p><p>例如，假设我们要将字符串 &quot;Hello World?&quot; 编码为URL编码形式，那么编码后的结果将会是 &quot;Hello%20World%3F&quot;。</p><p>URL编码通常使用在Web开发中，例如在GET请求中传递参数时，或者在构建动态URL时。在Python中，可以使用<code>urllib.parse</code>模块进行URL编码和解码的操作。</p><p>示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> urllib.parse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quote, unquote</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">original_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.example.com/search?q=hello world?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># URL编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoded_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quote(original_url)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded URL:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, encoded_url)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：https%3A//www.example.com/search%3Fq%3Dhello%20world%3F</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># URL解码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoded_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unquote(encoded_url)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded URL:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, decoded_url)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：https://www.example.com/search?q=hello world?</span></span></code></pre></div><p>这个示例演示了如何使用Python中的<code>urllib.parse.quote()</code>函数对URL进行编码，以及使用<code>urllib.parse.unquote()</code>函数对URL进行解码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.example.com/search?q=hello world?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalUrl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded URL:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, encodedUrl);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dhello%20world%3F</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dhello%20world%3F&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> decodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedUrl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded URL:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, decodedUrl);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：https://www.example.com/search?q=hello world?</span></span></code></pre></div><p>url编码</p><h2 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h2><h3 id="mysql" tabindex="-1">mysql <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;mysql&quot;">​</a></h3><h3 id="mongodb" tabindex="-1">mongodb <a class="header-anchor" href="#mongodb" aria-label="Permalink to &quot;mongodb&quot;">​</a></h3><h4 id="自执行函数" tabindex="-1">自执行函数 <a class="header-anchor" href="#自执行函数" aria-label="Permalink to &quot;自执行函数&quot;">​</a></h4><h4 id="base64编码" tabindex="-1">base64编码 <a class="header-anchor" href="#base64编码" aria-label="Permalink to &quot;base64编码&quot;">​</a></h4><h5 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h5><p>Base64是一种用于将二进制数据编码为文本的编码方式。它的名称来源于它使用的字符集，该字符集由64个字符组成，包括大写字母、小写字母、数字和两个额外的符号。</p><h5 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h5><p>Base64编码使用的字符集包括：</p><ol><li>大写字母 A-Z（共26个字符）</li><li>小写字母 a-z（共26个字符）</li><li>数字 0-9（共10个字符）</li><li>加号 &quot;+&quot; 和斜杠 &quot;/&quot;（共2个字符）</li></ol><p>通常情况下，Base64编码还会使用一个额外的符号来表示填充（padding），通常是等号 &quot;=&quot;。这些字符共同构成了Base64编码所用的64个字符。</p><h5 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h5><p>Base64编码通常用于在网络传输或存储中表示二进制数据，例如在电子邮件附件中传输二进制文件或在URL中传输数据。</p><p>Base64编码通过将3个字节的二进制数据编码为4个ASCII字符，因此它的编码长度总是4的倍数。如果原始数据的长度不是3的倍数，Base64编码器将在末尾添加一个或两个额外的字符（通常是等号），以使编码后的字符串长度成为4的倍数。</p><p>当将3个字节的二进制数据编码为4个ASCII字符时，Base64编码器会将这3个字节的数据划分为四组，每组6个比特。然后，每个6比特的值将被映射到Base64字符集中的相应字符。这样，每组6比特将被映射为一个Base64字符。</p><p>例如，假设我们有这样的3个字节的二进制数据：01011010 11001101 10101000。将其分成四组6比特，得到：</p><p>010110 (二进制为 22，对应Base64字符集中的字符为 &#39;W&#39;) 101101 (二进制为 45，对应Base64字符集中的字符为 &#39;t&#39;) 101101 (二进制为 45，对应Base64字符集中的字符为 &#39;t&#39;) 010110 (二进制为 22，对应Base64字符集中的字符为 &#39;W&#39;) 然后，将这四个Base64字符连接起来，就得到了最终的Base64编码字符串，即 &quot;WttW&quot;。</p><p>总结来说，将3个字节的二进制数据编码为4个ASCII字符的过程是将原始数据划分为4组6比特，然后根据这些6比特值在Base64字符集中找到对应的字符。</p><p>学习了base64，为什么是三个字节转化为4个字符，因为一个字节八位，64个字符可以代表6位，八和六的最小公倍数是24。妙啊！！！</p><p>Base64编码的主要特点是它可以将二进制数据转换为纯文本形式，这使得它在许多不支持二进制数据传输的环境中非常有用。它也是许多网络协议和数据存储格式的一部分，如HTTP、SMTP、JSON等。</p><p>Base64编码虽然能够将二进制数据转换为文本，但它并不是加密算法，因为Base64编码可以被轻松地解码还原为原始的二进制数据。因此，不应该将Base64编码用于敏感数据的加密或安全传输。</p><p>在浏览器中和Python中都可以使用内置的函数或库来进行Base64编码和解码操作。</p><p>在浏览器中，可以使用JavaScript的内置函数<code>btoa()</code>进行Base64编码，以及<code>atob()</code>进行解码。</p><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64编码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> btoa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedData); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出： &quot;SGVsbG8sIHdvcmxkIQ==&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64解码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decodedData); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出： &quot;Hello, world!&quot;</span></span></code></pre></div><p>在Python中，可以使用内置的<code>base64</code>模块进行Base64编码和解码操作。</p><p>示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Base64编码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoded_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64.b64encode(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoded_data)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出： b&#39;SGVsbG8sIHdvcmxkIQ==&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Base64解码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decoded_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64.b64decode(encoded_data)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decoded_data.decode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出： &quot;Hello, world!&quot;</span></span></code></pre></div><p>这些示例演示了在浏览器中使用JavaScript和在Python中使用<code>base64</code>模块进行Base64编码和解码的方法。</p><p>一般情况下，图片通常会被转换成Base64编码形式。这种转换将图片的二进制数据编码成纯文本形式，以便在网页中直接嵌入或者在数据传输中以文本的形式进行传递。在前端开发中，可以将图片转换为Base64编码以减少HTTP请求次数，从而提高网页加载速度。</p><p>例如，可以使用以下Python代码将图片转换为Base64编码：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image_file:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    base64_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64.b64encode(image_file.read()).decode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base64_image)</span></span></code></pre></div><p>在这个示例中，&quot;image.jpg&quot; 是图片文件的路径。<code>b64encode()</code>函数将图片的二进制数据编码为Base64编码，然后使用<code>.decode(&quot;utf-8&quot;)</code>将字节串转换为字符串形式。</p><p>在前端开发中，可以直接使用HTML的<code>&lt;img&gt;</code>标签，并将Base64编码的图片数据直接嵌入到<code>src</code>属性中，如下所示：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data:image/jpeg;base64,</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">base64_image_data_here&gt;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>其中 <code>&lt;base64_image_data_here&gt;</code> 是图片的Base64编码数据。</p><p>作用，缘由，做什么，为什么要做</p><h2 id="python" tabindex="-1">python <a class="header-anchor" href="#python" aria-label="Permalink to &quot;python&quot;">​</a></h2><h3 id="requests" tabindex="-1">requests <a class="header-anchor" href="#requests" aria-label="Permalink to &quot;requests&quot;">​</a></h3><h3 id="xpath-lxml-bs4-re" tabindex="-1">xpath/lxml,bs4,re <a class="header-anchor" href="#xpath-lxml-bs4-re" aria-label="Permalink to &quot;xpath/lxml,bs4,re&quot;">​</a></h3><h3 id="协程" tabindex="-1">协程 <a class="header-anchor" href="#协程" aria-label="Permalink to &quot;协程&quot;">​</a></h3><h2 id="浏览器开发者工具" tabindex="-1">浏览器开发者工具 <a class="header-anchor" href="#浏览器开发者工具" aria-label="Permalink to &quot;浏览器开发者工具&quot;">​</a></h2><h4 id="开发者工具检测" tabindex="-1">开发者工具检测 <a class="header-anchor" href="#开发者工具检测" aria-label="Permalink to &quot;开发者工具检测&quot;">​</a></h4><h4 id="打开开发者工具页面重定向-关闭" tabindex="-1">打开开发者工具页面重定向/关闭 <a class="header-anchor" href="#打开开发者工具页面重定向-关闭" aria-label="Permalink to &quot;打开开发者工具页面重定向/关闭&quot;">​</a></h4><h2 id="自动化-rpc" tabindex="-1">自动化/rpc <a class="header-anchor" href="#自动化-rpc" aria-label="Permalink to &quot;自动化/rpc&quot;">​</a></h2><h3 id="selenium" tabindex="-1">Selenium <a class="header-anchor" href="#selenium" aria-label="Permalink to &quot;Selenium&quot;">​</a></h3><h3 id="验证码识别" tabindex="-1">验证码识别 <a class="header-anchor" href="#验证码识别" aria-label="Permalink to &quot;验证码识别&quot;">​</a></h3><p>数字验证码</p><p>计算题验证码</p><p>轨迹【画一个对号等】</p><p>旋转【旋转圆形风景图片为正】</p><p>滑块【拖动小图形填充进缺口】</p><p>无感验证码</p><h2 id="js逆向-hook" tabindex="-1">JS逆向-Hook <a class="header-anchor" href="#js逆向-hook" aria-label="Permalink to &quot;JS逆向-Hook&quot;">​</a></h2><h2 id="js逆向-加密算法" tabindex="-1">JS逆向-加密算法 <a class="header-anchor" href="#js逆向-加密算法" aria-label="Permalink to &quot;JS逆向-加密算法&quot;">​</a></h2><h3 id="md5" tabindex="-1">md5 <a class="header-anchor" href="#md5" aria-label="Permalink to &quot;md5&quot;">​</a></h3><h3 id="aes" tabindex="-1">aes <a class="header-anchor" href="#aes" aria-label="Permalink to &quot;aes&quot;">​</a></h3><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h2><h2 id="混淆" tabindex="-1">混淆 <a class="header-anchor" href="#混淆" aria-label="Permalink to &quot;混淆&quot;">​</a></h2><h3 id="方法与目标" tabindex="-1">方法与目标 <a class="header-anchor" href="#方法与目标" aria-label="Permalink to &quot;方法与目标&quot;">​</a></h3><h4 id="变量名混淆" tabindex="-1">变量名混淆 <a class="header-anchor" href="#变量名混淆" aria-label="Permalink to &quot;变量名混淆&quot;">​</a></h4><p>减少代码可读性，隐藏掉语义化的变量名，函数名</p><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><h2 id="浏览器指纹" tabindex="-1">浏览器指纹 <a class="header-anchor" href="#浏览器指纹" aria-label="Permalink to &quot;浏览器指纹&quot;">​</a></h2><h2 id="蜜罐" tabindex="-1">蜜罐 <a class="header-anchor" href="#蜜罐" aria-label="Permalink to &quot;蜜罐&quot;">​</a></h2><h2 id="风控" tabindex="-1">风控 <a class="header-anchor" href="#风控" aria-label="Permalink to &quot;风控&quot;">​</a></h2><h2 id="脱混淆-ast" tabindex="-1">脱混淆/ast <a class="header-anchor" href="#脱混淆-ast" aria-label="Permalink to &quot;脱混淆/ast&quot;">​</a></h2><h2 id="wasm" tabindex="-1">wasm <a class="header-anchor" href="#wasm" aria-label="Permalink to &quot;wasm&quot;">​</a></h2><h2 id="简历写法-面试技巧" tabindex="-1">简历写法，面试技巧 <a class="header-anchor" href="#简历写法-面试技巧" aria-label="Permalink to &quot;简历写法，面试技巧&quot;">​</a></h2><h2 id="副业接单经验" tabindex="-1">副业接单经验 <a class="header-anchor" href="#副业接单经验" aria-label="Permalink to &quot;副业接单经验&quot;">​</a></h2><h1 id="借鉴" tabindex="-1">借鉴 <a class="header-anchor" href="#借鉴" aria-label="Permalink to &quot;借鉴&quot;">​</a></h1><h3 id="专栏大纲-爬虫从入门到精通" tabindex="-1">专栏大纲：爬虫从入门到精通 <a class="header-anchor" href="#专栏大纲-爬虫从入门到精通" aria-label="Permalink to &quot;专栏大纲：爬虫从入门到精通&quot;">​</a></h3><h4 id="第1部分-爬虫基础" tabindex="-1">第1部分：爬虫基础 <a class="header-anchor" href="#第1部分-爬虫基础" aria-label="Permalink to &quot;第1部分：爬虫基础&quot;">​</a></h4><ol><li><p><strong>介绍网络爬虫</strong></p><ul><li>爬虫的定义和主要功能</li><li>爬虫在业界的应用实例</li><li>法律和道德问题：遵守robots.txt协议</li></ul></li><li><p><strong>HTML/CSS/JavaScript基础</strong></p><ul><li>理解网页的结构</li><li>常用的HTML标签和属性</li><li>CSS选择器的使用</li><li>JavaScript在网页中的作用</li></ul></li><li><p><strong>开发环境设置</strong></p><ul><li>Python基础</li><li>安装Python和相关库（如requests, BeautifulSoup, Selenium）</li><li>使用IDE和其他工具的介绍</li></ul></li><li><p><strong>初级爬虫项目</strong></p><ul><li>使用requests获取网页内容</li><li>BeautifulSoup入门：解析HTML</li><li>简单的数据提取实例</li></ul></li></ol><h4 id="第2部分-进阶爬虫技术" tabindex="-1">第2部分：进阶爬虫技术 <a class="header-anchor" href="#第2部分-进阶爬虫技术" aria-label="Permalink to &quot;第2部分：进阶爬虫技术&quot;">​</a></h4><ol><li><p><strong>处理JavaScript渲染的页面</strong></p><ul><li>理解浏览器渲染过程</li><li>使用Selenium模拟浏览器操作</li><li>处理动态加载数据</li></ul></li><li><p><strong>数据存储方案</strong></p><ul><li>保存数据到文本文件</li><li>使用数据库：SQL与NoSQL选型和使用</li><li>数据清洗和格式化</li></ul></li><li><p><strong>避免爬虫被封</strong></p><ul><li>用户代理（User-Agent）和IP轮换技术</li><li>理解频率限制及其规避策略</li><li>使用代理服务器</li></ul></li><li><p><strong>中级爬虫项目</strong></p><ul><li>爬取电子商务网站的产品信息</li><li>实现一个天气数据爬虫</li><li>新闻网站的内容抓取和存储</li></ul></li></ol><h4 id="第3部分-高级爬虫开发" tabindex="-1">第3部分：高级爬虫开发 <a class="header-anchor" href="#第3部分-高级爬虫开发" aria-label="Permalink to &quot;第3部分：高级爬虫开发&quot;">​</a></h4><ol><li><p><strong>爬虫框架Scrapy</strong></p><ul><li>Scrapy框架的架构和优势</li><li>创建Scrapy项目和爬虫</li><li>数据提取和管道处理</li></ul></li><li><p><strong>分布式爬虫</strong></p><ul><li>分布式爬虫的原理和实现</li><li>使用Scrapy-Redis实现分布式爬虫</li></ul></li><li><p><strong>爬虫的监控和维护</strong></p><ul><li>监控爬虫的运行状态</li><li>日志记录和错误处理</li><li>爬虫的维护和更新策略</li></ul></li><li><p><strong>高级爬虫项目</strong></p><ul><li>社交媒体数据的自动抓取和分析</li><li>实时航班信息爬虫</li><li>大规模电商网站的定期数据抓取</li></ul></li></ol><h4 id="第4部分-专栏总结" tabindex="-1">第4部分：专栏总结 <a class="header-anchor" href="#第4部分-专栏总结" aria-label="Permalink to &quot;第4部分：专栏总结&quot;">​</a></h4><ol><li><strong>爬虫项目的最佳实践</strong></li><li><strong>未来爬虫技术的发展趋势</strong></li><li><strong>如何将爬虫技能转化为职业优势</strong></li></ol><p>这个大纲为读者提供了从基础知识到高级技能的全面学习路径，不仅帮助新手快速入门，还能让有经验的开发者进一步提高他们的技术水平。每部分结束后可以包括一个实际项目，使读者能够通过实践进一步巩固和深化所学知识。</p>`,128),h=[t];function n(p,o,r,d,k,c){return i(),s("div",null,h)}const g=a(e,[["render",n]]);export{E as __pageData,g as default};
