import{aw as a,q as s,p as n,aS as e}from"./chunks/framework.D2i5q5tO.js";const b=JSON.parse('{"title":"Git笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/git笔记.md","filePath":"后端/git笔记.md","lastUpdated":1718006465000}'),p={name:"后端/git笔记.md"},t=e(`<h1 id="git笔记" tabindex="-1">Git笔记 <a class="header-anchor" href="#git笔记" aria-label="Permalink to &quot;Git笔记&quot;">​</a></h1><h2 id="官网" tabindex="-1">官网 <a class="header-anchor" href="#官网" aria-label="Permalink to &quot;官网&quot;">​</a></h2><p>下载：</p><h2 id="git的提交规范" tabindex="-1">git的提交规范 <a class="header-anchor" href="#git的提交规范" aria-label="Permalink to &quot;git的提交规范&quot;">​</a></h2><p>Git提交规范是为了确保代码提交信息清晰、一致、易于理解和跟踪。以下是常见的Git提交规范，您可以根据需要进行调整和使用：</p><h3 id="_1-提交信息格式" tabindex="-1">1. 提交信息格式 <a class="header-anchor" href="#_1-提交信息格式" aria-label="Permalink to &quot;1. 提交信息格式&quot;">​</a></h3><p>提交信息通常由标题、描述和正文组成，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre></div><h3 id="_2-类型-type" tabindex="-1">2. 类型（type） <a class="header-anchor" href="#_2-类型-type" aria-label="Permalink to &quot;2. 类型（type）&quot;">​</a></h3><p><strong>常见的提交类型包括：</strong></p><ul><li><strong>feat</strong>: 增加新功能</li><li><strong>fix</strong>: 修复Bug</li><li><strong>docs</strong>: 仅文档更改</li><li><strong>style</strong>: 不影响代码含义的更改（空白、格式、缺少分号等）</li><li><strong>refactor</strong>: 既不是修复bug也不是添加新功能的代码重构</li><li><strong>perf</strong>: 提高性能的代码更改</li><li><strong>test</strong>: 添加或修改测试</li><li><strong>chore</strong>: 影响构建系统或外部依赖的更改（如：更新npm包，修改构建任务）</li><li><strong>revert</strong>: 恢复先前的提交</li></ul><h3 id="_3-作用域-scope" tabindex="-1">3. 作用域（scope） <a class="header-anchor" href="#_3-作用域-scope" aria-label="Permalink to &quot;3. 作用域（scope）&quot;">​</a></h3><p><strong>作用域指的是此次更改的影响范围，可以是以下任意一个：</strong></p><ul><li>模块或功能名称（如：用户管理、支付模块）</li><li>文件或目录名称（如：components、utils）</li></ul><h3 id="_4-标题-subject" tabindex="-1">4. 标题（subject） <a class="header-anchor" href="#_4-标题-subject" aria-label="Permalink to &quot;4. 标题（subject）&quot;">​</a></h3><p><strong>标题是对此次更改的简要描述，注意以下几点：</strong></p><ul><li>使用祈使语气，例如：修复登录页面Bug，而不是修复了登录页面Bug</li><li>首字母小写</li><li>不超过50个字符</li><li>结尾不要加句号</li></ul><h3 id="_5-正文-body" tabindex="-1">5. 正文（body） <a class="header-anchor" href="#_5-正文-body" aria-label="Permalink to &quot;5. 正文（body）&quot;">​</a></h3><p><strong>正文对提交进行详细描述，说明代码更改的原因、方式和目的：</strong></p><ul><li>使用祈使语气</li><li>每行不超过72个字符</li><li>解释“是什么”和“为什么”而不是“怎么做”</li></ul><h3 id="_6-页脚-footer" tabindex="-1">6. 页脚（footer） <a class="header-anchor" href="#_6-页脚-footer" aria-label="Permalink to &quot;6. 页脚（footer）&quot;">​</a></h3><p><strong>页脚用于列出不兼容变更和关闭的任务编号：</strong></p><ul><li>如果提交是一个破坏性变更，页脚应该以 BREAKING CHANGE: 开头，后面是对变更的描述、变更原因和迁移方法。</li><li>如果是关闭某个issue，页脚可以使用类似 Closes #123 的格式。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>好的，以下是一个中文的Git提交信息示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>feat(用户管理): 添加用户登录功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>增加了用户使用邮箱和密码登录的功能。</span></span>
<span class="line"><span>该功能包含前端和后端的实现。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: 登录接口现在需要认证。</span></span>
<span class="line"><span>Closes #45</span></span></code></pre></div><p>以下是不同类型的中文提交示例：</p><h4 id="新功能-feat" tabindex="-1">新功能（feat） <a class="header-anchor" href="#新功能-feat" aria-label="Permalink to &quot;新功能（feat）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>feat(支付模块): 增加支付宝支付功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>增加了用户可以使用支付宝进行支付的功能。</span></span>
<span class="line"><span>该功能包括支付请求和支付结果处理。</span></span></code></pre></div><h4 id="bug修复-fix" tabindex="-1">Bug修复（fix） <a class="header-anchor" href="#bug修复-fix" aria-label="Permalink to &quot;Bug修复（fix）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fix(订单管理): 修复订单无法取消的Bug</span></span>
<span class="line"><span></span></span>
<span class="line"><span>修复了用户在特定情况下无法取消订单的问题。</span></span>
<span class="line"><span>原因是订单状态判断逻辑有误。</span></span></code></pre></div><h4 id="文档更改-docs" tabindex="-1">文档更改（docs） <a class="header-anchor" href="#文档更改-docs" aria-label="Permalink to &quot;文档更改（docs）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docs(README): 更新安装步骤</span></span>
<span class="line"><span></span></span>
<span class="line"><span>更新了README文件中的安装步骤，增加了对新依赖项的说明。</span></span></code></pre></div><h4 id="代码格式-style" tabindex="-1">代码格式（style） <a class="header-anchor" href="#代码格式-style" aria-label="Permalink to &quot;代码格式（style）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>style(代码格式): 调整代码格式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>调整了代码的缩进和空行，以提高代码的可读性。</span></span>
<span class="line"><span>不涉及功能逻辑的更改。</span></span></code></pre></div><h4 id="代码重构-refactor" tabindex="-1">代码重构（refactor） <a class="header-anchor" href="#代码重构-refactor" aria-label="Permalink to &quot;代码重构（refactor）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>refactor(用户管理): 重构用户验证逻辑</span></span>
<span class="line"><span></span></span>
<span class="line"><span>重构了用户验证逻辑，将其从控制器中分离出来放到独立的服务中。</span></span></code></pre></div><h4 id="性能优化-perf" tabindex="-1">性能优化（perf） <a class="header-anchor" href="#性能优化-perf" aria-label="Permalink to &quot;性能优化（perf）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>perf(查询优化): 优化数据库查询性能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>优化了订单查询的数据库查询语句，减少了查询时间。</span></span></code></pre></div><h4 id="添加测试-test" tabindex="-1">添加测试（test） <a class="header-anchor" href="#添加测试-test" aria-label="Permalink to &quot;添加测试（test）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>test(用户管理): 添加用户登录功能的单元测试</span></span>
<span class="line"><span></span></span>
<span class="line"><span>为用户登录功能添加了单元测试，覆盖了主要的登录场景。</span></span></code></pre></div><h4 id="构建系统或外部依赖的更改-chore" tabindex="-1">构建系统或外部依赖的更改（chore） <a class="header-anchor" href="#构建系统或外部依赖的更改-chore" aria-label="Permalink to &quot;构建系统或外部依赖的更改（chore）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chore(依赖): 升级lodash版本</span></span>
<span class="line"><span></span></span>
<span class="line"><span>升级了lodash库的版本以修复已知的安全漏洞。</span></span></code></pre></div><h4 id="恢复先前的提交-revert" tabindex="-1">恢复先前的提交（revert） <a class="header-anchor" href="#恢复先前的提交-revert" aria-label="Permalink to &quot;恢复先前的提交（revert）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>revert: 恢复 &quot;feat(支付模块): 增加支付宝支付功能&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>此提交恢复了先前错误的提交，支付宝支付功能将暂时移除。</span></span></code></pre></div><p>在创建仓库并初始化项目框架时，提交信息可以简洁明了，通常包含以下内容：</p><h3 id="提交信息示例" tabindex="-1">提交信息示例 <a class="header-anchor" href="#提交信息示例" aria-label="Permalink to &quot;提交信息示例&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chore: 初始化项目框架</span></span>
<span class="line"><span></span></span>
<span class="line"><span>创建了项目的基础文件夹结构，并添加了必要的配置文件。</span></span></code></pre></div><h4 id="创建仓库、一些文件夹-初始化项目框架" tabindex="-1">创建仓库、一些文件夹，初始化项目框架 <a class="header-anchor" href="#创建仓库、一些文件夹-初始化项目框架" aria-label="Permalink to &quot;创建仓库、一些文件夹，初始化项目框架&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chore: 初始化项目框架</span></span>
<span class="line"><span></span></span>
<span class="line"><span>创建了项目的基础文件夹结构，并添加了必要的配置文件。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>文件夹结构：</span></span>
<span class="line"><span>- src/: 源代码文件夹</span></span>
<span class="line"><span>- tests/: 测试文件夹</span></span>
<span class="line"><span>- docs/: 文档文件夹</span></span>
<span class="line"><span></span></span>
<span class="line"><span>添加的配置文件：</span></span>
<span class="line"><span>- .gitignore: Git忽略文件配置</span></span>
<span class="line"><span>- README.md: 项目介绍文件</span></span></code></pre></div><p>通过这种方式，团队成员可以一目了然地了解项目的初始设置。</p><p>通过这种规范化的提交信息，团队成员可以更清晰地了解每次提交的目的和影响，有助于项目的长期维护和协作。</p><p>通过遵循这些规范，可以帮助您和您的团队更好地管理代码提交历史，提高项目的可维护性和可读性。</p>`,53),l=[t];function i(o,c,r,h,d,u){return n(),s("div",null,l)}const v=a(p,[["render",i]]);export{b as __pageData,v as default};
