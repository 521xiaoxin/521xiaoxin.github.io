import{aw as s,q as i,p as a,aS as n}from"./chunks/framework.D2i5q5tO.js";const g=JSON.parse('{"title":"代理模式：控制对象访问的智能方式","description":"","frontmatter":{},"headers":[],"relativePath":"Python/系列文章/23种设计模式/代理模式：控制对象访问的智能方式.md","filePath":"Python/系列文章/23种设计模式/代理模式：控制对象访问的智能方式.md","lastUpdated":1718006042000}'),l={name:"Python/系列文章/23种设计模式/代理模式：控制对象访问的智能方式.md"},t=n(`<h1 id="代理模式-控制对象访问的智能方式" tabindex="-1">代理模式：控制对象访问的智能方式 <a class="header-anchor" href="#代理模式-控制对象访问的智能方式" aria-label="Permalink to &quot;代理模式：控制对象访问的智能方式&quot;">​</a></h1><p>在面向对象的软件开发中，代理模式是一种结构型设计模式，它为其他对象提供一个代理或占位符以控制对这个对象的访问。代理模式在实现权限控制、延迟初始化和远程对象访问等方面非常有用。本文将详细介绍代理模式的定义、实现、应用场景以及优缺点，帮助您全面理解并有效应用这一模式。</p><p><img src="https://img-blog.csdnimg.cn/direct/9b7ea2416470407fbafb87af42a8f438.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-代理模式的定义" tabindex="-1">1. 代理模式的定义 <a class="header-anchor" href="#_1-代理模式的定义" aria-label="Permalink to &quot;1. 代理模式的定义&quot;">​</a></h2><p>代理模式（Proxy Pattern）通过创建一个代理对象，来控制对另一个对象的访问。这种模式常用于延迟对象的创建和加载，权限控制，以及执行额外的辅助操作。它主要包括三种类型：虚拟代理、保护代理和远程代理。</p><h2 id="_2-实现代理模式" tabindex="-1">2. 实现代理模式 <a class="header-anchor" href="#_2-实现代理模式" aria-label="Permalink to &quot;2. 实现代理模式&quot;">​</a></h2><p>在Python中，实现代理模式可以通过简单地封装对象实现。以下是一个示例，演示了如何使用代理模式来添加访问控制：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;定义真实对象和代理的共同接口，这样一个代理可以用来代替真实对象。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;定义代理所代表的真实对象。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RealSubject: Handling request.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;维护一个对 RealSubject 对象的引用，可以访问它的接口。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, real_subject):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._real_subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> real_subject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.check_access():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._real_subject.request()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log_access()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy: Checking access prior to firing a real request.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy: Logging the time of request.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">real_subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RealSubject()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Proxy(real_subject)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.request()</span></span></code></pre></div><h2 id="_3-代理模式的应用实例" tabindex="-1">3. 代理模式的应用实例 <a class="header-anchor" href="#_3-代理模式的应用实例" aria-label="Permalink to &quot;3. 代理模式的应用实例&quot;">​</a></h2><p>代理模式在现实世界和软件开发中有广泛的应用，包括：</p><ul><li><strong>网络请求</strong>：使用代理服务器来控制对特定资源的访问。</li><li><strong>智能引用代理</strong>：进行额外的动作，比如引用计数和对象加载。</li><li><strong>保护代理</strong>：控制对敏感对象的访问权限。</li><li><strong>虚拟代理</strong>：用于懒加载技术，只有在需要时才创建对象。</li></ul><h2 id="_4-优点和缺点" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>隔离复杂性</strong>：代理可以在用户和复杂对象之间作为中介，隐藏复杂的实现细节。</li><li><strong>增强功能</strong>：可以在不修改真实对象的情况下，通过代理为特定操作添加功能。</li></ul><h3 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>可能会导致系统响应速度减慢</strong>：由于引入了额外的代理对象，可能会导致处理速度变慢。</li><li><strong>增加系统复杂性</strong>：增加了新的类和对象，复杂了系统结构。</li></ul><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>代理模式提供了一种有效的方式来控制对对象的访问，同时为开发人员提供了操作对象的更大灵活性。适当使用此模式可以帮助改善程序的结构并增加其功能。希望本文能帮助您理解代理模式的核心概念，并在您的项目中有效地应用这一模式。</p>`,18),h=[t];function e(p,k,r,d,o,E){return a(),i("div",null,h)}const y=s(l,[["render",e]]);export{g as __pageData,y as default};
