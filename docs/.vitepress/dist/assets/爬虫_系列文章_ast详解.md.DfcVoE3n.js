import{aw as s,q as a,p as i,aS as t}from"./chunks/framework.D2i5q5tO.js";const E=JSON.parse('{"title":"ast详解","description":"","frontmatter":{},"headers":[],"relativePath":"爬虫/系列文章/ast详解.md","filePath":"爬虫/系列文章/ast详解.md","lastUpdated":1718006465000}'),l={name:"爬虫/系列文章/ast详解.md"},n=t(`<h1 id="ast详解" tabindex="-1">ast详解 <a class="header-anchor" href="#ast详解" aria-label="Permalink to &quot;ast详解&quot;">​</a></h1><h2 id="在线网站" tabindex="-1">在线网站 <a class="header-anchor" href="#在线网站" aria-label="Permalink to &quot;在线网站&quot;">​</a></h2><p><a href="https://astexplorer.net/" target="_blank" rel="noreferrer">https://astexplorer.net/</a></p><h2 id="为什么要学习ast" tabindex="-1">为什么要学习ast <a class="header-anchor" href="#为什么要学习ast" aria-label="Permalink to &quot;为什么要学习ast&quot;">​</a></h2><p>学习抽象语法树（AST，Abstract Syntax Tree）是深入理解编程语言和开发相关工具（如编译器、解释器、代码分析器和代码混淆器）的一个重要步骤。AST 在源代码的分析和转换中扮演着核心角色，以下是一些关键点和资源，可以帮助你开始学习AST。</p><h3 id="什么是ast" tabindex="-1">什么是AST？ <a class="header-anchor" href="#什么是ast" aria-label="Permalink to &quot;什么是AST？&quot;">​</a></h3><p>AST 是源代码的树状表示，用于抽象出代码的结构而忽略掉无关的语法细节如空白符、括号和标点符号。每个节点代表了程序中的一个构造，比如语句、表达式、声明等。</p><h3 id="学习ast的关键点" tabindex="-1">学习AST的关键点 <a class="header-anchor" href="#学习ast的关键点" aria-label="Permalink to &quot;学习AST的关键点&quot;">​</a></h3><ol><li><strong>节点类型</strong>：了解不同的节点类型，例如表达式、语句、标识符和字面量等，以及它们在AST中的作用。</li><li><strong>树的遍历</strong>：学习如何遍历AST，包括深度优先遍历和广度优先遍历，这对于分析和修改代码至关重要。</li><li><strong>使用工具生成和操作AST</strong>：熟悉工具如Esprima、Babel等，这些工具可以帮助你生成JavaScript的AST并进行操作。</li><li><strong>实际应用</strong>：学习AST在不同领域的应用，如代码混淆、静态代码分析、代码转换等。</li></ol><h3 id="学习资源" tabindex="-1">学习资源 <a class="header-anchor" href="#学习资源" aria-label="Permalink to &quot;学习资源&quot;">​</a></h3><ul><li><strong>在线教程和课程</strong>：查找关于编译技术或现代JavaScript工具链的在线课程，这些课程经常包含关于如何操作AST的模块。</li><li><strong>文档和工具</strong>： <ul><li><a href="https://github.com/jamiebuilds/babel-handbook" target="_blank" rel="noreferrer">Babel Handbook</a>: 一个关于Babel及其插件开发的手册，特别是如何使用Babel处理AST。</li><li><a href="http://esprima.org/" target="_blank" rel="noreferrer">Esprima</a>: 一个开源的JavaScript解析器，用于生成AST，网站上有丰富的文档和示例。</li><li><a href="https://astexplorer.net/" target="_blank" rel="noreferrer">AST Explorer</a>: 一个在线工具，可以实时查看不同解析器生成的AST，并尝试自己的代码。</li></ul></li></ul><p>通过这些资源的学习和实践，你可以逐步掌握如何生成、分析和操作AST，这对开发相关的工具和技术会非常有帮助。</p><h2 id="ast学习路线" tabindex="-1">ast学习路线 <a class="header-anchor" href="#ast学习路线" aria-label="Permalink to &quot;ast学习路线&quot;">​</a></h2><p>要学习抽象语法树（AST）的概念和应用，你可以按照以下目录结构来逐步深入学习：</p><h3 id="_1-基础介绍" tabindex="-1">1. 基础介绍 <a class="header-anchor" href="#_1-基础介绍" aria-label="Permalink to &quot;1. 基础介绍&quot;">​</a></h3><ul><li><strong>什么是AST</strong>：了解AST的定义和它在编程语言中的作用。</li><li><strong>AST的组成</strong>：学习AST的基本组成元素，如节点类型（如表达式、语句、标识符）。</li></ul><h3 id="_2-ast生成" tabindex="-1">2. AST生成 <a class="header-anchor" href="#_2-ast生成" aria-label="Permalink to &quot;2. AST生成&quot;">​</a></h3><ul><li><strong>解析器介绍</strong>：了解常用的JavaScript解析器如Esprima、Acorn、Babel等。</li><li><strong>生成AST</strong>：学习如何使用这些工具生成JavaScript代码的AST。</li></ul><h3 id="_3-ast操作" tabindex="-1">3. AST操作 <a class="header-anchor" href="#_3-ast操作" aria-label="Permalink to &quot;3. AST操作&quot;">​</a></h3><ul><li><strong>遍历技术</strong>：掌握如何遍历AST（深度优先遍历和广度优先遍历）。</li><li><strong>修改AST</strong>：学习如何修改AST的节点，实现代码的转换或优化。</li><li><strong>生成代码</strong>：从修改后的AST重新生成源代码。</li></ul><h3 id="_4-ast在工具中的应用" tabindex="-1">4. AST在工具中的应用 <a class="header-anchor" href="#_4-ast在工具中的应用" aria-label="Permalink to &quot;4. AST在工具中的应用&quot;">​</a></h3><ul><li><strong>代码混淆</strong>：探讨如何使用AST进行JavaScript代码混淆。</li><li><strong>静态代码分析</strong>：了解AST如何被用于静态代码分析，提高代码质量和安全性。</li><li><strong>编译器设计</strong>：简介AST在编译器设计中的应用，如何从AST生成目标代码。</li></ul><h3 id="_5-实际项目与练习" tabindex="-1">5. 实际项目与练习 <a class="header-anchor" href="#_5-实际项目与练习" aria-label="Permalink to &quot;5. 实际项目与练习&quot;">​</a></h3><ul><li><strong>练习项目</strong>：通过具体的练习加深理解，如编写一个简单的AST基的代码转换工具。</li><li><strong>开源项目贡献</strong>：参与开源项目，如Babel插件开发，实践AST的操作和应用。</li></ul><h3 id="_6-高级主题" tabindex="-1">6. 高级主题 <a class="header-anchor" href="#_6-高级主题" aria-label="Permalink to &quot;6. 高级主题&quot;">​</a></h3><ul><li><strong>性能优化</strong>：学习在操作AST时如何考虑性能优化。</li><li><strong>错误处理和调试</strong>：如何在处理AST时进行错误检测和调试。</li></ul><h3 id="学习资源推荐" tabindex="-1">学习资源推荐 <a class="header-anchor" href="#学习资源推荐" aria-label="Permalink to &quot;学习资源推荐&quot;">​</a></h3><ul><li><strong>书籍</strong>：查找有关编译原理和JavaScript引擎的书籍。</li><li><strong>在线课程</strong>：参加Coursera或Udemy上的相关课程，如编译技术或现代JavaScript工具。</li><li><strong>文档和社区</strong>：阅读Esprima和Babel的官方文档，参与Stack Overflow等社区的讨论。</li></ul><p>通过系统地学习这些内容，你可以获得关于AST的深入理解并能够在实际项目中应用这些知识。这些步骤不仅帮助你掌握理论，更重要的是通过实践来加深理解和技能。</p><h2 id="ast学习目标" tabindex="-1">ast学习目标 <a class="header-anchor" href="#ast学习目标" aria-label="Permalink to &quot;ast学习目标&quot;">​</a></h2><p>为了有效地学习JSVMP（JavaScript Virtual Machine Protection），你可以设定以下学习目标：</p><h3 id="_1-理解jsvmp的基本概念" tabindex="-1">1. 理解JSVMP的基本概念 <a class="header-anchor" href="#_1-理解jsvmp的基本概念" aria-label="Permalink to &quot;1. 理解JSVMP的基本概念&quot;">​</a></h3><ul><li><strong>目标</strong>：学习JSVMP的定义、它如何工作以及它在前端代码保护中的作用。</li><li><strong>方法</strong>：阅读相关的技术文章和官方文档，理解其核心原理和技术基础。</li></ul><h3 id="_2-掌握jsvmp的实现机制" tabindex="-1">2. 掌握JSVMP的实现机制 <a class="header-anchor" href="#_2-掌握jsvmp的实现机制" aria-label="Permalink to &quot;2. 掌握JSVMP的实现机制&quot;">​</a></h3><ul><li><strong>目标</strong>：深入了解JSVMP的内部结构，包括它如何将JavaScript代码转换为字节码，以及如何通过自定义的解释器执行这些字节码。</li><li><strong>方法</strong>：研究相关技术文献，参考现有的开源项目，了解虚拟机技术和字节码的生成与执行过程。</li></ul><h3 id="_3-学习jsvmp的应用场景" tabindex="-1">3. 学习JSVMP的应用场景 <a class="header-anchor" href="#_3-学习jsvmp的应用场景" aria-label="Permalink to &quot;3. 学习JSVMP的应用场景&quot;">​</a></h3><ul><li><strong>目标</strong>：了解JSVMP可以解决的安全问题，以及它在实际开发中的应用场景。</li><li><strong>方法</strong>：查找案例研究或行业报告，学习如何在实际项目中应用JSVMP来提高代码的安全性。</li></ul><h3 id="_4-实践jsvmp的应用" tabindex="-1">4. 实践JSVMP的应用 <a class="header-anchor" href="#_4-实践jsvmp的应用" aria-label="Permalink to &quot;4. 实践JSVMP的应用&quot;">​</a></h3><ul><li><strong>目标</strong>：通过项目实践来加深对JSVMP技术的理解和应用能力。</li><li><strong>方法</strong>：开始一个小项目，尝试使用JSVMP技术来保护一个简单的JavaScript应用。记录并解决在实践过程中遇到的问题。</li></ul><h3 id="_5-分析jsvmp的优势与局限" tabindex="-1">5. 分析JSVMP的优势与局限 <a class="header-anchor" href="#_5-分析jsvmp的优势与局限" aria-label="Permalink to &quot;5. 分析JSVMP的优势与局限&quot;">​</a></h3><ul><li><strong>目标</strong>：评估JSVMP技术的优势和可能的局限性，以及与其他JavaScript保护技术的比较。</li><li><strong>方法</strong>：通过比较JSVMP与其他技术如代码混淆、加密等，写一篇综述，总结各自的优缺点和最适应的应用条件。</li></ul><p>这些目标将帮助你系统地学习JSVMP，不仅仅是理论知识，还包括实际操作和应用，从而更全面地掌握这一技术。通过设定这些具体的学习目标，你可以有针对性地安排学习计划和实践，逐步提升你在前端安全领域的专业能力。</p><h2 id="学习ast可以做的项目" tabindex="-1">学习ast可以做的项目 <a class="header-anchor" href="#学习ast可以做的项目" aria-label="Permalink to &quot;学习ast可以做的项目&quot;">​</a></h2><p>学习AST（抽象语法树）时，实践项目可以帮助你更深入地理解AST的结构和操作。这里有一些适合初学者到中级开发者的小项目建议：</p><h3 id="_1-简单的代码格式化器" tabindex="-1">1. 简单的代码格式化器 <a class="header-anchor" href="#_1-简单的代码格式化器" aria-label="Permalink to &quot;1. 简单的代码格式化器&quot;">​</a></h3><ul><li><strong>项目目标</strong>：创建一个工具，它可以读取JavaScript代码，然后重新格式化并输出美化后的代码。</li><li><strong>涉及技能</strong>：解析代码生成AST，遍历AST并重新生成代码。</li></ul><h3 id="_2-变量重命名工具" tabindex="-1">2. 变量重命名工具 <a class="header-anchor" href="#_2-变量重命名工具" aria-label="Permalink to &quot;2. 变量重命名工具&quot;">​</a></h3><ul><li><strong>项目目标</strong>：开发一个工具，它能遍历JavaScript代码的AST，将指定的变量名改为新的名称。</li><li><strong>涉及技能</strong>：解析代码，遍历AST，修改特定节点，生成新代码。</li></ul><h3 id="_3-检测未使用的代码" tabindex="-1">3. 检测未使用的代码 <a class="header-anchor" href="#_3-检测未使用的代码" aria-label="Permalink to &quot;3. 检测未使用的代码&quot;">​</a></h3><ul><li><strong>项目目标</strong>：创建一个工具，用于检测和报告JavaScript代码中未被使用的变量和函数。</li><li><strong>涉及技能</strong>：AST解析，深度遍历，作用域分析。</li></ul><h3 id="_4-实现一个简单的lint工具" tabindex="-1">4. 实现一个简单的lint工具 <a class="header-anchor" href="#_4-实现一个简单的lint工具" aria-label="Permalink to &quot;4. 实现一个简单的lint工具&quot;">​</a></h3><ul><li><strong>项目目标</strong>：构建一个基本的lint工具，它能检查常见的代码问题，如未声明的变量，或者可能的类型错误。</li><li><strong>涉及技能</strong>：代码解析，问题模式识别，报告生成。</li></ul><h3 id="_5-构建一个简单的代码转换器" tabindex="-1">5. 构建一个简单的代码转换器 <a class="header-anchor" href="#_5-构建一个简单的代码转换器" aria-label="Permalink to &quot;5. 构建一个简单的代码转换器&quot;">​</a></h3><ul><li><strong>项目目标</strong>：开发一个转换工具，比如将ES6代码转换为ES5代码，以提高代码的兼容性。</li><li><strong>涉及技能</strong>：AST解析，节点类型识别和转换，代码生成。</li></ul><h3 id="_6-添加自定义语法特性" tabindex="-1">6. 添加自定义语法特性 <a class="header-anchor" href="#_6-添加自定义语法特性" aria-label="Permalink to &quot;6. 添加自定义语法特性&quot;">​</a></h3><ul><li><strong>项目目标</strong>：扩展一个现有的JavaScript解析器，添加一种自定义的语法特性（如新的操作符或语句），并处理这种新语法的解析和代码生成。</li><li><strong>涉及技能</strong>：语言设计，解析器修改，AST扩展。</li></ul><h3 id="_7-ast可视化工具" tabindex="-1">7. AST可视化工具 <a class="header-anchor" href="#_7-ast可视化工具" aria-label="Permalink to &quot;7. AST可视化工具&quot;">​</a></h3><ul><li><strong>项目目标</strong>：创建一个工具，它可以将JavaScript代码的AST以图形方式显示，帮助开发者更好地理解AST的结构。</li><li><strong>涉及技能</strong>：AST解析，图形界面编程，数据可视化。</li></ul><p>这些项目不仅帮助你加深对AST的理解，还能让你学习如何使用现代JavaScript工具链中的工具，如Babel和ESLint。完成这些项目后，你将能更有效地使用AST进行代码分析和转换。</p><h2 id="ast的组成" tabindex="-1">ast的组成 <a class="header-anchor" href="#ast的组成" aria-label="Permalink to &quot;ast的组成&quot;">​</a></h2><p>抽象语法树（AST）是源代码的结构化表示，用于捕捉编程语言构造的语法关系。AST通过节点来表示编程语言中的各种构造，每个节点代表程序中的一种结构，如语句、表达式或声明。以下是AST的主要组成部分：</p><h3 id="_1-节点-node" tabindex="-1">1. 节点（Node） <a class="header-anchor" href="#_1-节点-node" aria-label="Permalink to &quot;1. 节点（Node）&quot;">​</a></h3><ul><li><strong>根节点（Root Node）</strong>：代表整个程序或一个独立代码块的起点。</li><li><strong>内部节点（Internal Nodes）</strong>：通常表示控制结构（如循环、条件判断）和数据结构（如类定义、函数定义），反映了程序的逻辑结构。</li><li><strong>叶节点（Leaf Nodes）</strong>：代表程序中的基本元素，如变量名、常数、操作符等。</li></ul><h3 id="_2-边-edges" tabindex="-1">2. 边（Edges） <a class="header-anchor" href="#_2-边-edges" aria-label="Permalink to &quot;2. 边（Edges）&quot;">​</a></h3><ul><li><strong>边</strong>连接节点，表示程序构造之间的关系，如父子关系。在AST中，从一个节点到另一个节点的边定义了程序的控制流或数据流。</li></ul><h3 id="_3-节点类型" tabindex="-1">3. 节点类型 <a class="header-anchor" href="#_3-节点类型" aria-label="Permalink to &quot;3. 节点类型&quot;">​</a></h3><ul><li><strong>声明节点（Declaration Nodes）</strong>：用于变量声明、函数声明等。</li><li><strong>表达式节点（Expression Nodes）</strong>：涵盖各种运算和函数调用，如算术表达式、逻辑表达式等。</li><li><strong>语句节点（Statement Nodes）</strong>：如赋值语句、控制流语句（if、while、for等）。</li></ul><h3 id="_4-属性-properties" tabindex="-1">4. 属性（Properties） <a class="header-anchor" href="#_4-属性-properties" aria-label="Permalink to &quot;4. 属性（Properties）&quot;">​</a></h3><ul><li><strong>每个节点可以有属性</strong>，这些属性包含了额外信息，如数据类型、作用域、访问权限等，这有助于在后续的编译或代码分析阶段使用。</li></ul><h3 id="实例解析" tabindex="-1">实例解析 <a class="header-anchor" href="#实例解析" aria-label="Permalink to &quot;实例解析&quot;">​</a></h3><p>考虑简单的JavaScript代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>对应的AST可能包括：</p><ul><li><strong>根节点</strong>：表示整个声明。</li><li><strong>声明节点</strong>：表示变量声明。</li><li><strong>标识符节点</strong>（Leaf Node）：变量名 <code>x</code>。</li><li><strong>数值节点</strong>（Leaf Node）：数值 <code>1</code>。</li></ul><p>每个节点的具体类型和属性取决于使用的语言和解析器。例如，使用不同的JavaScript解析器（如Esprima、Babel）生成的AST在细节上可能会有所不同。</p><p>学习AST对于进行代码分析、转换或优化都是非常重要的。它不仅是编译器设计的基础，也是现代代码工具（如代码美化器、混淆器、静态分析工具）的核心。通过掌握AST的结构和操作，你可以更深入地理解和影响程序的行为。</p><h2 id="常用的ast解析器" tabindex="-1">常用的ast解析器 <a class="header-anchor" href="#常用的ast解析器" aria-label="Permalink to &quot;常用的ast解析器&quot;">​</a></h2><p>在JavaScript开发中，有几种流行的AST（抽象语法树）解析器，它们可以帮助开发者分析和处理代码。这些解析器能够读取JavaScript代码并生成AST，这对于代码的深入分析、优化或转换非常有用。下面是一些常用的JavaScript AST解析器：</p><h3 id="_1-esprima" tabindex="-1">1. <strong>Esprima</strong> <a class="header-anchor" href="#_1-esprima" aria-label="Permalink to &quot;1. **Esprima**&quot;">​</a></h3><p>Esprima 是一个高性能的JavaScript解析器，支持ECMAScript的标准。它生成的AST遵循Mozilla的Parser API规范。Esprima广泛用于各种工具和库中，如代码质量检查工具和文档生成工具。</p><ul><li><strong>官方网站</strong>：<a href="http://esprima.org/" target="_blank" rel="noreferrer">Esprima</a></li></ul><h3 id="_2-acorn" tabindex="-1">2. <strong>Acorn</strong> <a class="header-anchor" href="#_2-acorn" aria-label="Permalink to &quot;2. **Acorn**&quot;">​</a></h3><p>Acorn 是一个小巧、快速的JavaScript解析器，同样支持ECMAScript标准。它比Esprima更模块化，容易扩展，因此很适合在需要自定义解析器行为的场景中使用。</p><ul><li><strong>GitHub 仓库</strong>：<a href="https://github.com/acornjs/acorn" target="_blank" rel="noreferrer">Acorn</a></li></ul><h3 id="_3-babel-parser-babylon" tabindex="-1">3. <strong>Babel Parser (babylon)</strong> <a class="header-anchor" href="#_3-babel-parser-babylon" aria-label="Permalink to &quot;3. **Babel Parser (babylon)**&quot;">​</a></h3><p>Babel Parser，原名Babylon，是Babel编译器的一部分。它不仅支持最新的JavaScript标准，还可以处理实验性语法。Babel Parser特别适合在代码转换和编译工具链中使用。</p><ul><li><strong>GitHub 仓库</strong>：<a href="https://github.com/babel/babel/tree/main/packages/babel-parser" target="_blank" rel="noreferrer">Babel Parser</a></li></ul><h3 id="_4-uglifyjs" tabindex="-1">4. <strong>UglifyJS</strong> <a class="header-anchor" href="#_4-uglifyjs" aria-label="Permalink to &quot;4. **UglifyJS**&quot;">​</a></h3><p>虽然UglifyJS主要是作为一个压缩工具使用，但它内部包含一个解析器，可以生成和操作AST。UglifyJS常用于生产环境中的代码压缩和混淆。</p><ul><li><strong>GitHub 仓库</strong>：<a href="https://github.com/mishoo/UglifyJS" target="_blank" rel="noreferrer">UglifyJS</a></li></ul><h3 id="_5-typescript-compiler-api" tabindex="-1">5. <strong>TypeScript Compiler API</strong> <a class="header-anchor" href="#_5-typescript-compiler-api" aria-label="Permalink to &quot;5. **TypeScript Compiler API**&quot;">​</a></h3><p>对于TypeScript代码，TypeScript自身的编译器API也提供了强大的AST生成和操作能力。虽然它主要用于TypeScript，但也可以处理纯JavaScript代码。</p><ul><li><strong>官方文档</strong>：<a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer">TypeScript Compiler API</a></li></ul><p>这些解析器各有特点，选择合适的解析器取决于项目的具体需求，比如所需处理的语法特性、性能要求、以及是否需要扩展解析器的能力。在实际应用中，开发者可能需要根据具体的开发环境和目标来选择最合适的工具。</p><h2 id="推荐解析器" tabindex="-1">推荐解析器 <a class="header-anchor" href="#推荐解析器" aria-label="Permalink to &quot;推荐解析器&quot;">​</a></h2><p>对于学习JavaScript反编译技术，我推荐使用 <strong>Babel Parser</strong>（之前称为Babylon）。这个解析器是Babel编译器的一部分，非常适合于现代JavaScript项目，支持最新的ECMAScript标准以及实验性的语法。Babel Parser的以下特点使其成为学习反编译技术的理想选择：</p><ol><li><p><strong>广泛支持</strong>：Babel Parser支持包括ES2020在内的最新JavaScript语法，这意味着你可以解析几乎所有现代JavaScript代码。</p></li><li><p><strong>插件系统</strong>：Babel的强大插件系统允许你自定义解析过程，通过插件可以修改或扩展语法树（AST），这在进行代码转换和分析时非常有用。</p></li><li><p><strong>社区和文档</strong>：作为Babel项目的一部分，Babel Parser拥有广泛的社区支持和详尽的文档，这可以帮助你快速解决学习过程中遇到的问题。</p></li><li><p><strong>实用性和教育资源</strong>：许多教程和项目都使用Babel来展示代码转换和编译原理，学习这些资源可以帮助你更深入地理解JavaScript的编译和反编译过程。</p></li></ol><p>开始学习时，你可以查看Babel的官方文档，尤其是有关Babel Parser的部分，这将帮助你快速入门：</p><ul><li><a href="https://babeljs.io/docs/en/" target="_blank" rel="noreferrer">Babel官方文档</a></li></ul><p>此外，实际操作中尝试编写一些Babel插件，用于转换或分析JavaScript代码，也是一个很好的学习方法。通过这些实践，你将能够深入理解JavaScript的编译和反编译技术。</p><h2 id="acorn和babel-parser-babylon-使用起来差别大吗" tabindex="-1">Acorn和Babel Parser (babylon)使用起来差别大吗 <a class="header-anchor" href="#acorn和babel-parser-babylon-使用起来差别大吗" aria-label="Permalink to &quot;Acorn和Babel Parser (babylon)使用起来差别大吗&quot;">​</a></h2><p>Acorn 和 Babel Parser（以前称为Babylon）都是非常流行的JavaScript解析器，它们在使用上有一些相似之处，也有各自的特点和差异。以下是一些关键的比较点：</p><h3 id="性能和大小" tabindex="-1">性能和大小 <a class="header-anchor" href="#性能和大小" aria-label="Permalink to &quot;性能和大小&quot;">​</a></h3><ul><li><strong>Acorn</strong>：以其轻量和速度而闻名，适合需要快速解析的场合。Acorn的核心非常紧凑，特别适用于性能敏感的应用。</li><li><strong>Babel Parser</strong>：虽然性能略逊于Acorn，但考虑到它支持更多实验性语法和插件系统，这种性能差异通常是可接受的。</li></ul><h3 id="语法支持" tabindex="-1">语法支持 <a class="header-anchor" href="#语法支持" aria-label="Permalink to &quot;语法支持&quot;">​</a></h3><ul><li><strong>Acorn</strong>：支持现代JavaScript（ECMAScript标准）的大部分特性。由于其模块化设计，Acorn易于扩展，开发者可以添加自己的插件来支持更多语法。</li><li><strong>Babel Parser</strong>：支持最新的ECMAScript标准及许多实验性语法特性。Babel Parser是Babel生态系统的一部分，这使得它在处理将来可能成为标准的JavaScript新特性方面特别强大。</li></ul><h3 id="扩展性和定制性" tabindex="-1">扩展性和定制性 <a class="header-anchor" href="#扩展性和定制性" aria-label="Permalink to &quot;扩展性和定制性&quot;">​</a></h3><ul><li><strong>Acorn</strong>：提供了易于使用的插件接口，允许开发者创建自定义的语法结构和功能。</li><li><strong>Babel Parser</strong>：作为Babel生态系统的一部分，拥有庞大的插件库和高度的定制性。这使得它在进行复杂的代码转换和编译任务时非常灵活。</li></ul><h3 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h3><ul><li><strong>Acorn</strong>：由于其轻量和快速的特性，非常适合作为构建工具或在线应用的JavaScript解析器。</li><li><strong>Babel Parser</strong>：更适合用于开发需要处理最新JavaScript特性或进行大量代码转换的应用，如开发编译器或开发工具链的一部分。</li></ul><p>总的来说，如果你需要一个轻量级且快速的解析器，并且你的项目不需要太多针对最新JavaScript特性的支持，Acorn可能是一个更好的选择。而如果你的项目依赖于Babel生态系统，或者你需要广泛支持最新和实验性的JavaScript特性，Babel Parser会是更合适的选择。</p><h2 id="babel-parser的使用方法" tabindex="-1">Babel Parser的使用方法 <a class="header-anchor" href="#babel-parser的使用方法" aria-label="Permalink to &quot;Babel Parser的使用方法&quot;">​</a></h2><p>使用Babel Parser进行AST操作涉及到三个主要步骤：遍历AST、修改AST节点以及从修改后的AST生成新的源代码。下面，我将一步步指导你如何使用Babel Parser完成这些任务。</p><h3 id="_1-安装babel及其插件" tabindex="-1">1. 安装Babel及其插件 <a class="header-anchor" href="#_1-安装babel及其插件" aria-label="Permalink to &quot;1. 安装Babel及其插件&quot;">​</a></h3><p>首先，你需要安装Babel核心库和解析器。如果你还没有安装，可以通过npm（Node.js包管理器）来安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/parser</span></span></code></pre></div><h3 id="_2-解析代码生成ast" tabindex="-1">2. 解析代码生成AST <a class="header-anchor" href="#_2-解析代码生成ast" aria-label="Permalink to &quot;2. 解析代码生成AST&quot;">​</a></h3><p>使用<code>@babel/parser</code>来解析JavaScript代码，生成AST：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/parser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`function square(n) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  return n * n;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sourceType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &quot;script&quot; 根据代码类型选择</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果需要使用的话，可以添加额外的语言特性支持</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 支持JSX</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;typescript&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 支持TypeScript</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_3-遍历ast" tabindex="-1">3. 遍历AST <a class="header-anchor" href="#_3-遍历ast" aria-label="Permalink to &quot;3. 遍历AST&quot;">​</a></h3><p>遍历AST可以使用<code>@babel/traverse</code>库。这个库提供了一种方法来访问AST中的所有节点，你可以安装它：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/traverse</span></span></code></pre></div><p>然后使用它来遍历AST。你可以指定针对特定类型节点的访问者方法（Visitor methods）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> traverse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/traverse&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).default;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  enter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      path.node.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>上面的代码遍历AST，并将所有名为<code>n</code>的标识符改为<code>x</code>。</p><h3 id="_4-修改ast" tabindex="-1">4. 修改AST <a class="header-anchor" href="#_4-修改ast" aria-label="Permalink to &quot;4. 修改AST&quot;">​</a></h3><p>在遍历过程中，你可以根据需要修改节点。例如，上面的示例已经演示了如何在遍历时修改标识符的名称。你可以添加新节点、替换节点或删除节点等。</p><h3 id="_5-生成代码" tabindex="-1">5. 生成代码 <a class="header-anchor" href="#_5-生成代码" aria-label="Permalink to &quot;5. 生成代码&quot;">​</a></h3><p>修改完AST后，你可以使用<code>@babel/generator</code>来从AST生成新的代码。安装这个库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/generator</span></span></code></pre></div><p>然后生成代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/generator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).default;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* options */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, code);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output.code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出修改后的代码</span></span></code></pre></div><p>这将输出修改后的JavaScript代码。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这个过程涉及到将源代码解析为AST，遍历并修改这个AST，最后从AST生成新的代码。Babel的强大功能使得它在现代JavaScript开发中非常有用，特别是在开发构建工具、编译器插件或进行代码转换和优化时。</p><p>通过这些步骤，你可以开始使用Babel进行基本的AST操作。随着实践的深入，你可以探索更多高级特性和技术，比如编写自定义Babel插件来处理复杂的代码转换任务。</p><h2 id="输出解析后完整的ast" tabindex="-1">输出解析后完整的ast <a class="header-anchor" href="#输出解析后完整的ast" aria-label="Permalink to &quot;输出解析后完整的ast&quot;">​</a></h2><p>要输出JavaScript代码解析后的完整AST，你可以使用前面提到的<code>@babel/parser</code>来解析代码，并使用Node.js的<code>console.log</code>来打印整个AST对象。这里是一个简单的步骤说明：</p><h3 id="_1-安装必要的库" tabindex="-1">1. 安装必要的库 <a class="header-anchor" href="#_1-安装必要的库" aria-label="Permalink to &quot;1. 安装必要的库&quot;">​</a></h3><p>确保你已经安装了<code>@babel/parser</code>。如果未安装，可以使用以下命令安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/parser</span></span></code></pre></div><h3 id="_2-解析javascript代码并打印ast" tabindex="-1">2. 解析JavaScript代码并打印AST <a class="header-anchor" href="#_2-解析javascript代码并打印ast" aria-label="Permalink to &quot;2. 解析JavaScript代码并打印AST&quot;">​</a></h3><p>创建一个JavaScript文件，比如<code>print-ast.js</code>，然后使用以下代码来解析一个简单的JavaScript函数并打印出其AST：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/parser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例JavaScript代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`function square(n) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  return n * n;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析代码生成AST</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sourceType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &quot;script&quot;，根据代码类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据需要添加插件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印AST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 美化输出</span></span></code></pre></div><h3 id="_3-运行脚本" tabindex="-1">3. 运行脚本 <a class="header-anchor" href="#_3-运行脚本" aria-label="Permalink to &quot;3. 运行脚本&quot;">​</a></h3><p>在命令行中运行你的脚本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> print-ast.js</span></span></code></pre></div><p>这将在控制台输出完整的AST。输出将是一个格式化的JSON对象，其中包含了AST的所有节点和属性。</p><h3 id="解析输出" tabindex="-1">解析输出 <a class="header-anchor" href="#解析输出" aria-label="Permalink to &quot;解析输出&quot;">​</a></h3><p>输出的AST是一个复杂的JSON对象，顶级通常是一个<code>File</code>节点，包含一个<code>program</code>属性，它又包含整个程序的AST。你可以看到不同类型的节点，如<code>FunctionDeclaration</code>（函数声明）、<code>VariableDeclaration</code>（变量声明）等，以及它们的位置信息、作用域信息等。</p><p>通过这种方式，你可以获取到任何JavaScript代码的AST结构，这对于学习AST的结构、开发相关工具或进行代码分析非常有帮助。</p><h2 id="使用ast进行javascript代码混淆-小工具" tabindex="-1">使用AST进行JavaScript代码混淆，小工具 <a class="header-anchor" href="#使用ast进行javascript代码混淆-小工具" aria-label="Permalink to &quot;使用AST进行JavaScript代码混淆，小工具&quot;">​</a></h2><p>制作一个使用AST进行JavaScript代码混淆的小工具是一个很好的实践项目，可以加深你对AST操作和JavaScript安全性的理解。以下是创建这样一个工具的基本步骤：</p><h3 id="_1-环境准备" tabindex="-1">1. 环境准备 <a class="header-anchor" href="#_1-环境准备" aria-label="Permalink to &quot;1. 环境准备&quot;">​</a></h3><p>首先，确保你的开发环境中已经安装了Node.js。然后，你需要安装几个npm包：<code>@babel/parser</code>用于解析JavaScript代码生成AST，<code>@babel/traverse</code>用于遍历AST，<code>@babel/types</code>用于创建或更新AST节点，以及<code>@babel/generator</code>用于从AST生成代码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/parser</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/traverse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/types</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/generator</span></span></code></pre></div><h3 id="_2-解析代码生成ast-1" tabindex="-1">2. 解析代码生成AST <a class="header-anchor" href="#_2-解析代码生成ast-1" aria-label="Permalink to &quot;2. 解析代码生成AST&quot;">​</a></h3><p>创建一个JavaScript文件，例如<code>obfuscate.js</code>，并写入以下代码来解析源代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/parser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> traverse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/traverse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).default;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/types&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> generator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/generator&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).default;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取你想要混淆的代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parser.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sourceType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果你的代码中包含JSX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_3-遍历并修改ast" tabindex="-1">3. 遍历并修改AST <a class="header-anchor" href="#_3-遍历并修改ast" aria-label="Permalink to &quot;3. 遍历并修改AST&quot;">​</a></h3><p>接下来，你可以遍历AST并对其进行修改。例如，你可以重命名变量，或者替换一些简单的表达式：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  FunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 给函数声明生成一个新的随机名字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path.node.id.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`func_\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  VariableDeclarator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 给变量声明生成一个新的随机名字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path.node.id.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`var_\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  StringLiteral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用一个简单的字符串替换方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path.node.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.node.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_4-生成新的混淆代码" tabindex="-1">4. 生成新的混淆代码 <a class="header-anchor" href="#_4-生成新的混淆代码" aria-label="Permalink to &quot;4. 生成新的混淆代码&quot;">​</a></h3><p>最后，使用<code>@babel/generator</code>从修改后的AST生成新的代码，并将其写入文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* options */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;output.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output.code); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出混淆后的代码到文件</span></span></code></pre></div><h3 id="_5-运行你的工具" tabindex="-1">5. 运行你的工具 <a class="header-anchor" href="#_5-运行你的工具" aria-label="Permalink to &quot;5. 运行你的工具&quot;">​</a></h3><p>将你想混淆的代码放在<code>input.js</code>文件中，然后运行<code>obfuscate.js</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> obfuscate.js</span></span></code></pre></div><p>你将在<code>output.js</code>中看到生成的混淆代码。</p><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这个简单的工具介绍了如何使用AST来混淆JavaScript代码。通过修改遍历和修改步骤，你可以实现更复杂的混淆策略，如逻辑混淆、控制流混淆等。这个项目不仅帮助你学习AST的操作，也为你提供了JavaScript代码保护的基础知识。</p>`,171),e=[n];function h(r,p,k,o,d,g){return i(),a("div",null,e)}const b=s(l,[["render",h]]);export{E as __pageData,b as default};
