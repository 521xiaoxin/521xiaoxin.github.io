import{_ as s,c as i,o as a,aR as n}from"./chunks/framework.DoYNU3c7.js";const y=JSON.parse('{"title":"Python设计模式总结","description":"","frontmatter":{},"headers":[],"relativePath":"Python/系列文章/23种设计模式-Python.md","filePath":"Python/系列文章/23种设计模式-Python.md","lastUpdated":null}'),l={name:"Python/系列文章/23种设计模式-Python.md"},h=n(`<h1 id="python设计模式总结" tabindex="-1">Python设计模式总结 <a class="header-anchor" href="#python设计模式总结" aria-label="Permalink to &quot;Python设计模式总结&quot;">​</a></h1><hr><p>Python作为一种多用途编程语言，其设计模式在软件开发中起着至关重要的作用。</p><p>设计模式是一套被反复使用、多数人知晓、经过分类编目、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。面向对象的设计模式通常被分为三类：创建型、结构型和行为型。 <img src="https://img-blog.csdnimg.cn/direct/90d42e5bdffb436eb1147ad86b280aa4.png" alt="23种设计模式"></p><h1 id="创建型" tabindex="-1">创建型 <a class="header-anchor" href="#创建型" aria-label="Permalink to &quot;创建型&quot;">​</a></h1><p>创建型模式主要涉及到对象的创建机制，帮助创建对象的方式，使得系统在不指定具体类的情况下创建对象。</p><h2 id="单例模式" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-label="Permalink to &quot;单例模式&quot;">​</a></h2><h1 id="单例模式-独一无二-探索单例模式在现代编程中的奥秘与实践" tabindex="-1">单例模式：独一无二：探索单例模式在现代编程中的奥秘与实践 <a class="header-anchor" href="#单例模式-独一无二-探索单例模式在现代编程中的奥秘与实践" aria-label="Permalink to &quot;单例模式：独一无二：探索单例模式在现代编程中的奥秘与实践&quot;">​</a></h1><p>设计模式在软件开发中扮演着至关重要的角色，它们是解决特定问题的经典方法。在众多设计模式中，单例模式因其独特的应用场景和简洁的实现而广受欢迎。本文将从多个角度详细介绍单例模式，帮助你理解它的定义、实现、应用以及潜在的限制。</p><h2 id="_1-什么是单例模式" tabindex="-1">1. 什么是单例模式？ <a class="header-anchor" href="#_1-什么是单例模式" aria-label="Permalink to &quot;1. 什么是单例模式？&quot;">​</a></h2><p>单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点。这种模式非常有用，特别是当一个对象需要协调整个系统中的操作时。使用单例模式可以保证全局状态的一致性，并减少不必要的资源消耗，因为它限制了实例的数量只有一个。</p><p><img src="https://img-blog.csdnimg.cn/direct/180632f6a628422a9dfa46a00feb431e.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_2-实现单例模式的方法" tabindex="-1">2. 实现单例模式的方法 <a class="header-anchor" href="#_2-实现单例模式的方法" aria-label="Permalink to &quot;2. 实现单例模式的方法&quot;">​</a></h2><p>在Python中实现单例模式有多种方法。下面是两种常见的实现方式：</p><h3 id="使用类属性" tabindex="-1">使用类属性 <a class="header-anchor" href="#使用类属性" aria-label="Permalink to &quot;使用类属性&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._instance</span></span></code></pre></div><h3 id="使用装饰器" tabindex="-1">使用装饰器 <a class="header-anchor" href="#使用装饰器" aria-label="Permalink to &quot;使用装饰器&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cls):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    instances </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instances:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_instance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@singleton</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 数据库连接初始化代码</span></span></code></pre></div><p>在多线程环境下，为保证线程安全，可以增加锁来同步访问。</p><h2 id="_3-单例模式的应用实例" tabindex="-1">3. 单例模式的应用实例 <a class="header-anchor" href="#_3-单例模式的应用实例" aria-label="Permalink to &quot;3. 单例模式的应用实例&quot;">​</a></h2><p>单例模式在实际应用中非常常见，特别是在需要全局管理和访问资源的场景：</p><ul><li><strong>配置文件管理器</strong>：管理整个应用程序的配置。</li><li><strong>日志记录器</strong>：统一管理日志记录。</li><li><strong>数据库连接池</strong>：管理数据库连接，优化资源分配。</li></ul><p>这些场景中，单例模式确保了操作的一致性和资源的有效管理。</p><h2 id="_4-单例模式的缺点和限制" tabindex="-1">4. 单例模式的缺点和限制 <a class="header-anchor" href="#_4-单例模式的缺点和限制" aria-label="Permalink to &quot;4. 单例模式的缺点和限制&quot;">​</a></h2><p>尽管单例模式非常有用，但它也有一些缺点：</p><ul><li><strong>过度依赖全局状态</strong>：这可能导致代码难以维护和扩展。</li><li><strong>单元测试困难</strong>：由于单例的全局状态，测试可能会受到干扰，使得编写无副作用的测试变得更加困难。</li><li><strong>代码灵活性降低</strong>：单例模式可能限制了代码的灵活性和可重用性。</li></ul><p>因此，使用单例模式时需要仔细考虑其对系统设计的影响。</p><h2 id="_5-与其他设计模式的比较" tabindex="-1">5. 与其他设计模式的比较 <a class="header-anchor" href="#_5-与其他设计模式的比较" aria-label="Permalink to &quot;5. 与其他设计模式的比较&quot;">​</a></h2><p>了解单例模式与其他设计模式的区别，如工厂模式和构建者模式，可以帮助你更好地理解何时使用单例模式。工厂模式用于创建多个实例，而构建者模式专注于构建复杂对象。单例模式则专注于维护单个实例。</p><h2 id="_6-总结" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h2><p>单例模式是一种非常实用的设计模式，尤其适合于需要全局状态管理的场景。然而，使用它时应当考虑到其可能带来的缺点。希望本文能帮助你更好地理解单例模式，并在适当的时候将其应用于你的项目中。</p><h2 id="工厂方法模式" tabindex="-1">工厂方法模式 <a class="header-anchor" href="#工厂方法模式" aria-label="Permalink to &quot;工厂方法模式&quot;">​</a></h2><h1 id="工厂方法模式-解锁灵活的对象创建策略" tabindex="-1">工厂方法模式：解锁灵活的对象创建策略 <a class="header-anchor" href="#工厂方法模式-解锁灵活的对象创建策略" aria-label="Permalink to &quot;工厂方法模式：解锁灵活的对象创建策略&quot;">​</a></h1><p>在软件设计中，工厂方法模式是一种非常实用的创建型设计模式，它不仅提升了系统的灵活性，还简化了对象的创建过程。本文将详细探讨工厂方法模式的核心概念、实现方式、应用场景以及与其他设计模式的对比，旨在提供一份全面且实用的指南。</p><h2 id="_1-工厂方法模式的定义" tabindex="-1">1. 工厂方法模式的定义 <a class="header-anchor" href="#_1-工厂方法模式的定义" aria-label="Permalink to &quot;1. 工厂方法模式的定义&quot;">​</a></h2><p>工厂方法模式（Factory Method Pattern）属于创建型模式，它提供了一种创建对象的最佳方式。在工厂方法模式中，创建对象的任务被交给了一个单独的工厂类，这个类的实例方法决定新创建的对象的类型。这种模式的核心精神是定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</p><h2 id="_2-实现工厂方法模式" tabindex="-1">2. 实现工厂方法模式 <a class="header-anchor" href="#_2-实现工厂方法模式" aria-label="Permalink to &quot;2. 实现工厂方法模式&quot;">​</a></h2><p>在Python中实现工厂方法模式相对直接。下面是一个简单的例子，通过这个例子，我们可以看到工厂方法如何在实践中被使用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> speak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> speak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Woof&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> speak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Meow&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PetFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_pet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, pet_type):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Dog(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Cat()}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pets.get(pet_type, Pet())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用工厂类创建对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PetFactory()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.get_pet(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dog.speak())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Woof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.get_pet(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cat.speak())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Meow</span></span></code></pre></div><p>在这个例子中，<code>PetFactory</code> 类决定了哪一个宠物类被实例化，从而封装了对象创建的逻辑。</p><h2 id="_3-工厂方法模式的应用实例" tabindex="-1">3. 工厂方法模式的应用实例 <a class="header-anchor" href="#_3-工厂方法模式的应用实例" aria-label="Permalink to &quot;3. 工厂方法模式的应用实例&quot;">​</a></h2><p>工厂方法模式广泛应用于需要大量创建复杂对象的软件系统中，特别是当对象的创建需要依赖于其所处的环境或配置时。一些典型的应用场景包括：</p><ul><li><strong>应用程序主题和皮肤的选择</strong>：不同的皮肤或主题可能需要不同类型的对象。</li><li><strong>跨平台应用开发</strong>：根据不同的操作系统创建适合的界面元素。</li><li><strong>管理数据库连接</strong>：根据不同的数据库服务器（如MySQL, PostgreSQL）创建对应的连接对象。</li></ul><h2 id="_4-优点和缺点" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>增加了系统的灵活性</strong>：可以在不修改现有代码的情况下引入新的类型。</li><li><strong>封装了创建逻辑</strong>：客户代码可以避免直接创建对象，降低了耦合。</li></ul><h3 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>代码可能变得更复杂</strong>：如果类的数量增加，维护相应的工厂类也可能变得复杂。</li></ul><h2 id="_5-工厂方法模式与简单工厂模式的对比" tabindex="-1">5. 工厂方法模式与简单工厂模式的对比 <a class="header-anchor" href="#_5-工厂方法模式与简单工厂模式的对比" aria-label="Permalink to &quot;5. 工厂方法模式与简单工厂模式的对比&quot;">​</a></h2><p>简单工厂模式与工厂方法模式经常被混淆，但它们有明显的不同。简单工厂通过一个方法创建所有类型的对象，而工厂方法模式则是通过多个方法或类来创建对象，每个方法或类负责创建一个具体类型的对象。工厂方法模式提供了更好的灵活性和扩展性。</p><h2 id="_6-总结-1" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结-1" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h2><p>工厂方法模式是一种有效的设计工具，特别适合那些对象创建逻辑较为复杂，或对象类型需要依赖于初始化条件的情况。</p><h2 id="抽象工厂模式" tabindex="-1">抽象工厂模式 <a class="header-anchor" href="#抽象工厂模式" aria-label="Permalink to &quot;抽象工厂模式&quot;">​</a></h2><h1 id="抽象工厂模式-深入探索面向对象设计的多样性" tabindex="-1">抽象工厂模式：深入探索面向对象设计的多样性 <a class="header-anchor" href="#抽象工厂模式-深入探索面向对象设计的多样性" aria-label="Permalink to &quot;抽象工厂模式：深入探索面向对象设计的多样性&quot;">​</a></h1><p>在软件开发中，正确地应用设计模式对于构建可扩展、可维护和高效的系统至关重要。抽象工厂模式作为创建型设计模式之一，提供了一个高层接口，用于创建一系列相关或依赖对象，而无需指定它们具体的类。本文将详细介绍抽象工厂模式的概念、实现、应用场景，并与其他设计模式进行对比，帮助您全面理解这一模式。</p><h2 id="_1-抽象工厂模式的定义" tabindex="-1">1. 抽象工厂模式的定义 <a class="header-anchor" href="#_1-抽象工厂模式的定义" aria-label="Permalink to &quot;1. 抽象工厂模式的定义&quot;">​</a></h2><p>抽象工厂模式（Abstract Factory Pattern）是一种提供接口以创建一系列相关或相互依赖对象的模式，而不需要指定具体类。该模式通常用于管理产品族的产品创建，并确保客户端与具体的产品创建解耦，支持添加新的产品族而不影响已有代码。</p><h2 id="_2-实现抽象工厂模式" tabindex="-1">2. 实现抽象工厂模式 <a class="header-anchor" href="#_2-实现抽象工厂模式" aria-label="Permalink to &quot;2. 实现抽象工厂模式&quot;">​</a></h2><p>在Python中，抽象工厂模式可以通过定义抽象类及其具体实现来实现。下面是一个简单的示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractProductA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useful_function_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteProductA1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractProductA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useful_function_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The result of the product A1.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteProductA2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractProductA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useful_function_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The result of the product A2.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_product_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteFactory1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_product_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteProductA1()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteFactory2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_product_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteProductA2()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> client_code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory: AbstractFactory):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    product_a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.create_product_a()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_a.useful_function_a())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">factory1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteFactory1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_code(factory1)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: The result of the product A1.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">factory2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteFactory2()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_code(factory2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: The result of the product A2.</span></span></code></pre></div><h2 id="_3-抽象工厂模式的应用实例" tabindex="-1">3. 抽象工厂模式的应用实例 <a class="header-anchor" href="#_3-抽象工厂模式的应用实例" aria-label="Permalink to &quot;3. 抽象工厂模式的应用实例&quot;">​</a></h2><p>抽象工厂模式在软件开发中有广泛的应用，特别是在需要支持多种风格或类型的产品集合的系统中。一些典型的应用场景包括：</p><ul><li><strong>用户界面组件库</strong>：根据不同的操作系统显示不同的界面元素。</li><li><strong>软件跨平台开发</strong>：为不同的操作系统提供适配的软件产品。</li><li><strong>游戏开发</strong>：根据不同的游戏环境创建不同的角色或道具。</li></ul><h2 id="_4-优点和缺点-1" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-1" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-1" tabindex="-1">优点： <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>提高了系统的抽象性</strong>：可以轻松切换产品系列或在运行时介绍新的产品变体。</li><li><strong>封装性好</strong>：产品系列的实现细节被封闭在具体的工厂实现中。</li></ul><h3 id="缺点-1" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>难以支持新种类的产品</strong>：如果需要添加新的产品，可能需要修改抽象工厂及其所有子类，这违反了开闭原则。</li></ul><h2 id="_5-抽象工厂模式与工厂方法模式的对比" tabindex="-1">5. 抽象工厂模式与工厂方法模式的对比 <a class="header-anchor" href="#_5-抽象工厂模式与工厂方法模式的对比" aria-label="Permalink to &quot;5. 抽象工厂模式与工厂方法模式的对比&quot;">​</a></h2><p>虽然抽象工厂模式和工厂方法模式都是创建型模式，它们的主要区别在于抽象工厂模式用于创建一系列相关的产品，而工厂方法模式用于创建一种产品。抽象工厂模式更适用于处理产品族问题，而工厂方法模式则侧重于单一产品的扩展。</p><h2 id="_6-总结-2" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结-2" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h2><p>抽象工厂模式是面向对象设计中一个极为强大的工具，特别是在构建复杂的产品系列时。正确使用这一模式可以极大地提升软件系统的灵活性和可扩展性。希望本文能帮助您深入理解抽象工厂模式，并在您的项目中有效地应用。</p><h2 id="建造者模式" tabindex="-1">建造者模式 <a class="header-anchor" href="#建造者模式" aria-label="Permalink to &quot;建造者模式&quot;">​</a></h2><h1 id="建造者模式-构造复杂对象的艺术" tabindex="-1">建造者模式：构造复杂对象的艺术 <a class="header-anchor" href="#建造者模式-构造复杂对象的艺术" aria-label="Permalink to &quot;建造者模式：构造复杂对象的艺术&quot;">​</a></h1><p>在面向对象的设计中，建造者模式是一种重要的创建型设计模式，专门用来构建复杂的对象。它主要目的是将对象的构造代码与其表示代码分离，使同样的构建过程可以创建不同的表示。本文将详细介绍建造者模式的定义、实现、应用场景以及优缺点，帮助您深入理解并有效应用这一模式。</p><h2 id="_1-建造者模式的定义" tabindex="-1">1. 建造者模式的定义 <a class="header-anchor" href="#_1-建造者模式的定义" aria-label="Permalink to &quot;1. 建造者模式的定义&quot;">​</a></h2><p>建造者模式（Builder Pattern）允许你创建不同风格的对象，同时避免构造器污染。当对象的创建算法应该独立于组成对象的部件及其装配方式时，这种模式尤其有用。建造者模式通常用来处理那些包含多个成员属性的类，尤其是当这些属性是可选的时。</p><h2 id="_2-实现建造者模式" tabindex="-1">2. 实现建造者模式 <a class="header-anchor" href="#_2-实现建造者模式" aria-label="Permalink to &quot;2. 实现建造者模式&quot;">​</a></h2><p>在Python中，建造者模式可以通过创建一个指导者（Director）和多个建造者（Builder）来实现。下面是一个简单的例子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, part):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parts.append(part)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list_parts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Product parts: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;, &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parts)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.product</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteBuilder1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.product.add(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PartA1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.product.add(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PartB1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteBuilder2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.product.add(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PartA2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_part_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.product.add(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PartC2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set_builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, builder):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._builder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_minimal_viable_product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._builder.build_part_a()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build_full_featured_product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._builder.build_part_a()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._builder.build_part_b()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._builder.build_part_c()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用指导者和建造者构建产品</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">director </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Director()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteBuilder1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">director.set_builder(builder1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">director.build_full_featured_product()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder1.get_result()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">product.list_parts()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Product parts: PartA1, PartB1, PartC1</span></span></code></pre></div><h2 id="_3-建造者模式的应用实例" tabindex="-1">3. 建造者模式的应用实例 <a class="header-anchor" href="#_3-建造者模式的应用实例" aria-label="Permalink to &quot;3. 建造者模式的应用实例&quot;">​</a></h2><p>建造者模式在软件开发中有广泛的应用，特别是在需要构建复杂对象的场景中，如：</p><ul><li><strong>文本编辑器的文档构造</strong>：构建具有不同格式的复杂文档。</li><li><strong>UI设计器</strong>：构建复杂的UI界面，如窗口或对话框。</li><li><strong>游戏开发</strong>：构建复杂的游戏角色或游戏场景。</li></ul><h2 id="_4-优点和缺点-2" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-2" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-2" tabindex="-1">优点： <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>封装性好</strong>：客户不需要了解产品内部组成的细节。</li><li><strong>构建和表示分离</strong>：提高了系统的灵活性。</li></ul><h3 id="缺点-2" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>设计复杂</strong>：增加了系统的复杂性，尤其是增加了多个新类。</li></ul><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>建造者模式为复杂对象的创建提供了高度的灵活性和控制力。通过将对象的构造过程封装在一个称为‘建造者’的独立对象中，这一模式不仅确保了代码的清晰，也便于未来的扩展和维护。</p><h2 id="原型模式" tabindex="-1">原型模式 <a class="header-anchor" href="#原型模式" aria-label="Permalink to &quot;原型模式&quot;">​</a></h2><h1 id="原型模式-复制对象的智能解决方案" tabindex="-1">原型模式：复制对象的智能解决方案 <a class="header-anchor" href="#原型模式-复制对象的智能解决方案" aria-label="Permalink to &quot;原型模式：复制对象的智能解决方案&quot;">​</a></h1><p>在软件开发过程中，对象的创建可能是一个昂贵的操作，特别是当对象的初始化包括从数据库加载数据、进行IO操作或进行复杂计算时。原型模式是一种创建型设计模式，它通过复制现有的实例来创建新的对象实例，从而避免了类初始化时的高成本。本文将详细介绍原型模式的定义、实现方法、应用场景以及优缺点。</p><h2 id="_1-原型模式的定义" tabindex="-1">1. 原型模式的定义 <a class="header-anchor" href="#_1-原型模式的定义" aria-label="Permalink to &quot;1. 原型模式的定义&quot;">​</a></h2><p>原型模式（Prototype Pattern）使得创建重复的对象变得更加简单，仅通过复制现有的实例来生成新的实例，而无需关心对象的具体类型。这种模式是通过实现一个原型接口，该接口用于创建当前对象的克隆。</p><h2 id="_2-实现原型模式" tabindex="-1">2. 实现原型模式 <a class="header-anchor" href="#_2-实现原型模式" aria-label="Permalink to &quot;2. 实现原型模式&quot;">​</a></h2><p>在Python中，原型模式可以通过克隆方法实现，其中 <code>copy</code> 模块提供了深复制和浅复制的功能。以下是原型模式的一个示例实现：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy.deepcopy(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcretePrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, number):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __str__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.number</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建原型实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcretePrototype(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prototype)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 1000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 通过原型复制创建新对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clone_prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prototype.clone()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clone_prototype)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 1000</span></span></code></pre></div><h2 id="_3-原型模式的应用实例" tabindex="-1">3. 原型模式的应用实例 <a class="header-anchor" href="#_3-原型模式的应用实例" aria-label="Permalink to &quot;3. 原型模式的应用实例&quot;">​</a></h2><p>原型模式在需要频繁创建相似对象的场景中非常有用，如：</p><ul><li><strong>游戏开发</strong>：在游戏中快速复制和创建相同或修改过的实体。</li><li><strong>GUI应用程序</strong>：复制复杂的图形对象时保持性能。</li><li><strong>配置对象</strong>：当对象的创建需要配置大量参数时，通过复制预配置的原型。</li></ul><h2 id="_4-原型模式的优点和缺点" tabindex="-1">4. 原型模式的优点和缺点 <a class="header-anchor" href="#_4-原型模式的优点和缺点" aria-label="Permalink to &quot;4. 原型模式的优点和缺点&quot;">​</a></h2><h3 id="优点-3" tabindex="-1">优点： <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>性能优化</strong>：原型模式允许通过直接复制对象来避免昂贵的资源请求，提高了应用性能。</li><li><strong>简化对象创建</strong>：通过克隆方法，可以简化复杂对象的创建过程。</li></ul><h3 id="缺点-3" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>复制复杂对象</strong>：如果原始对象复杂，克隆可能会涉及深度复制，需要注意管理对象的递归复制。</li><li><strong>维护困难</strong>：在克隆过程中维护复杂对象的一致性可能会比较困难。</li></ul><h2 id="_5-总结-1" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-1" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>原型模式提供了一种有效的方式来复制和创建类似的对象，特别是在对象创建成本较高的情况下。正确应用此模式可以显著提高系统性能和可扩展性。希望本文能帮助您理解原型模式的核心概念，并在您的项目中有效地应用这一模式。</p><h1 id="结构型" tabindex="-1">结构型 <a class="header-anchor" href="#结构型" aria-label="Permalink to &quot;结构型&quot;">​</a></h1><p>结构型模式关注于对象和类的组织，例如类之间的继承和组合关系，以获得更大的结构。</p><h2 id="适配器模式" tabindex="-1">适配器模式 <a class="header-anchor" href="#适配器模式" aria-label="Permalink to &quot;适配器模式&quot;">​</a></h2><h1 id="适配器模式-连接不兼容接口的桥梁" tabindex="-1">适配器模式：连接不兼容接口的桥梁 <a class="header-anchor" href="#适配器模式-连接不兼容接口的桥梁" aria-label="Permalink to &quot;适配器模式：连接不兼容接口的桥梁&quot;">​</a></h1><p>在软件开发中，适配器模式是一种结构型设计模式，它允许不兼容的接口之间进行交互，从而使它们能够一起工作。这个模式经常用于系统升级或集成第三方库的时候，当现有的代码无法直接使用新系统或库提供的接口时，适配器可以在不修改现有代码的情况下实现功能的整合。本文将详细介绍适配器模式的定义、实现、应用场景以及优缺点。</p><p><img src="https://img-blog.csdnimg.cn/direct/11733f481f2c4cbe9781ad7b1f36e2cd.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-适配器模式的定义" tabindex="-1">1. 适配器模式的定义 <a class="header-anchor" href="#_1-适配器模式的定义" aria-label="Permalink to &quot;1. 适配器模式的定义&quot;">​</a></h2><p>适配器模式（Adapter Pattern）也被称为包装器（Wrapper），这种模式作为两个不兼容的接口之间的桥梁，将一个类的接口转换成客户期望的另一个接口。适配器模式让那些由于接口不兼容而不能一起工作的类可以一起工作。</p><h2 id="_2-实现适配器模式" tabindex="-1">2. 实现适配器模式 <a class="header-anchor" href="#_2-实现适配器模式" aria-label="Permalink to &quot;2. 实现适配器模式&quot;">​</a></h2><p>适配器模式主要有两种实现方式：类适配器和对象适配器。类适配器使用多重继承对一个类的接口进行转换，而对象适配器则使用组合来实现接口的适配。以下是使用对象适配器方式的示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;这是客户所期望的接口。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Target: The default target&#39;s behavior.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adaptee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;这是需要适配的类。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> specific_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.eetpadA eht fo roivaheb laicepS&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Adapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Adaptee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;适配器通过在内部包装一个 Adaptee 对象，将接口从 Adaptee 转换为 Target。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Adapter: (TRANSLATED) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.specific_request()[::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用适配器实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Adapter()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target.request())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Adapter: (TRANSLATED) Special behavior of the Adaptee.</span></span></code></pre></div><h2 id="_3-适配器模式的应用实例" tabindex="-1">3. 适配器模式的应用实例 <a class="header-anchor" href="#_3-适配器模式的应用实例" aria-label="Permalink to &quot;3. 适配器模式的应用实例&quot;">​</a></h2><p>适配器模式在软件开发中有许多实际应用，例如：</p><ul><li><strong>集成第三方库</strong>：当第三方库的接口与现有系统的接口不匹配时，可以使用适配器。</li><li><strong>系统升级</strong>：在系统升级过程中保持向后兼容性。</li><li><strong>设备驱动</strong>：为不同的设备提供统一的接口。</li></ul><h2 id="_4-适配器模式的优点和缺点" tabindex="-1">4. 适配器模式的优点和缺点 <a class="header-anchor" href="#_4-适配器模式的优点和缺点" aria-label="Permalink to &quot;4. 适配器模式的优点和缺点&quot;">​</a></h2><h3 id="优点-4" tabindex="-1">优点： <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>增强了类的透明性和复用</strong>：现有的类可以在不修改其源代码的情况下复用。</li><li><strong>灵活性和扩展性增强</strong>：可以在不修改现有代码的情况下引入新的适配器。</li></ul><h3 id="缺点-4" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-4" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>复杂性增加</strong>：系统中可能会增加许多小对象，如适配器，使得系统整体设计更加复杂。</li></ul><h2 id="_5-总结-2" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-2" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>适配器模式提供了一种有效的方式来解决接口不兼容问题，使得原本由于接口不匹配而不能一起工作的类可以协同工作。正确应用此模式可以显著提高现有代码的复用性和系统的灵活性。希望本文能帮助您理解适配器模式的核心概念，并在您的项目中有效地应用这一模式。</p><h2 id="代理模式" tabindex="-1">代理模式 <a class="header-anchor" href="#代理模式" aria-label="Permalink to &quot;代理模式&quot;">​</a></h2><h1 id="代理模式-控制对象访问的智能方式" tabindex="-1">代理模式：控制对象访问的智能方式 <a class="header-anchor" href="#代理模式-控制对象访问的智能方式" aria-label="Permalink to &quot;代理模式：控制对象访问的智能方式&quot;">​</a></h1><p>在面向对象的软件开发中，代理模式是一种结构型设计模式，它为其他对象提供一个代理或占位符以控制对这个对象的访问。代理模式在实现权限控制、延迟初始化和远程对象访问等方面非常有用。本文将详细介绍代理模式的定义、实现、应用场景以及优缺点，帮助您全面理解并有效应用这一模式。</p><p><img src="https://img-blog.csdnimg.cn/direct/9b7ea2416470407fbafb87af42a8f438.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-代理模式的定义" tabindex="-1">1. 代理模式的定义 <a class="header-anchor" href="#_1-代理模式的定义" aria-label="Permalink to &quot;1. 代理模式的定义&quot;">​</a></h2><p>代理模式（Proxy Pattern）通过创建一个代理对象，来控制对另一个对象的访问。这种模式常用于延迟对象的创建和加载，权限控制，以及执行额外的辅助操作。它主要包括三种类型：虚拟代理、保护代理和远程代理。</p><h2 id="_2-实现代理模式" tabindex="-1">2. 实现代理模式 <a class="header-anchor" href="#_2-实现代理模式" aria-label="Permalink to &quot;2. 实现代理模式&quot;">​</a></h2><p>在Python中，实现代理模式可以通过简单地封装对象实现。以下是一个示例，演示了如何使用代理模式来添加访问控制：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;定义真实对象和代理的共同接口，这样一个代理可以用来代替真实对象。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;定义代理所代表的真实对象。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RealSubject: Handling request.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;维护一个对 RealSubject 对象的引用，可以访问它的接口。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, real_subject):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._real_subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> real_subject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.check_access():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._real_subject.request()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log_access()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy: Checking access prior to firing a real request.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log_access</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy: Logging the time of request.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">real_subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RealSubject()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Proxy(real_subject)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy.request()</span></span></code></pre></div><h2 id="_3-代理模式的应用实例" tabindex="-1">3. 代理模式的应用实例 <a class="header-anchor" href="#_3-代理模式的应用实例" aria-label="Permalink to &quot;3. 代理模式的应用实例&quot;">​</a></h2><p>代理模式在现实世界和软件开发中有广泛的应用，包括：</p><ul><li><strong>网络请求</strong>：使用代理服务器来控制对特定资源的访问。</li><li><strong>智能引用代理</strong>：进行额外的动作，比如引用计数和对象加载。</li><li><strong>保护代理</strong>：控制对敏感对象的访问权限。</li><li><strong>虚拟代理</strong>：用于懒加载技术，只有在需要时才创建对象。</li></ul><h2 id="_4-优点和缺点-3" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-3" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-5" tabindex="-1">优点： <a class="header-anchor" href="#优点-5" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>隔离复杂性</strong>：代理可以在用户和复杂对象之间作为中介，隐藏复杂的实现细节。</li><li><strong>增强功能</strong>：可以在不修改真实对象的情况下，通过代理为特定操作添加功能。</li></ul><h3 id="缺点-5" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-5" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>可能会导致系统响应速度减慢</strong>：由于引入了额外的代理对象，可能会导致处理速度变慢。</li><li><strong>增加系统复杂性</strong>：增加了新的类和对象，复杂了系统结构。</li></ul><h2 id="_5-总结-3" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-3" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>代理模式提供了一种有效的方式来控制对对象的访问，同时为开发人员提供了操作对象的更大灵活性。适当使用此模式可以帮助改善程序的结构并增加其功能。希望本文能帮助您理解代理模式的核心概念，并在您的项目中有效地应用这一模式。</p><h2 id="桥接模式" tabindex="-1">桥接模式 <a class="header-anchor" href="#桥接模式" aria-label="Permalink to &quot;桥接模式&quot;">​</a></h2><h1 id="桥接模式-解耦抽象与实现的设计艺术" tabindex="-1">桥接模式：解耦抽象与实现的设计艺术 <a class="header-anchor" href="#桥接模式-解耦抽象与实现的设计艺术" aria-label="Permalink to &quot;桥接模式：解耦抽象与实现的设计艺术&quot;">​</a></h1><p>在软件设计中，桥接模式是一种结构型设计模式，旨在将抽象部分与其实现部分分离，使它们可以独立地变化。这种模式通过提供更加灵活的代码结构帮助软件开发人员处理不断变化的需求，特别是在涉及多平台应用开发时。本文将详细介绍桥接模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/b2152724f9f747bdb8a1f2d530c1ea0b.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-桥接模式的定义" tabindex="-1">1. 桥接模式的定义 <a class="header-anchor" href="#_1-桥接模式的定义" aria-label="Permalink to &quot;1. 桥接模式的定义&quot;">​</a></h2><p>桥接模式（Bridge Pattern）使用“组合关系”代替“继承关系”，从而将抽象与实现分离开来，这样两者的接口和实现可以通过各自的方式独立地改变而不影响对方。在该模式中，通常会见到一个称为“抽象部分”的类包含一个指向“实现部分”的类的引用。</p><h2 id="_2-实现桥接模式" tabindex="-1">2. 实现桥接模式 <a class="header-anchor" href="#_2-实现桥接模式" aria-label="Permalink to &quot;2. 实现桥接模式&quot;">​</a></h2><p>在Python中，桥接模式可以通过定义一个抽象类和多个实现类来实现。以下是桥接模式的一个示例实现：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Implementor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;实现类接口（实现部分）&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation_impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteImplementorA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Implementor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体实现A&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation_impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Concrete Implementor A operation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteImplementorB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Implementor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体实现B&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation_impl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Concrete Implementor B operation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Abstraction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;抽象类（抽象部分）&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, implementor):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.implementor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> implementor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Abstract operation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.implementor.operation_impl()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementorA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteImplementorA()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abstraction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Abstraction(implementorA)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abstraction.operation()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">implementorB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteImplementorB()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abstraction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Abstraction(implementorB)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abstraction.operation()</span></span></code></pre></div><h2 id="_3-桥接模式的应用实例" tabindex="-1">3. 桥接模式的应用实例 <a class="header-anchor" href="#_3-桥接模式的应用实例" aria-label="Permalink to &quot;3. 桥接模式的应用实例&quot;">​</a></h2><p>桥接模式在软件开发中的应用非常广泛，特别是在以下场景：</p><ul><li><strong>跨平台应用开发</strong>：不同平台具有不同的实现，桥接模式可以帮助开发统一的API。</li><li><strong>UI框架和资源管理</strong>：不同的UI元素可以有不同的渲染实现。</li><li><strong>驱动器开发</strong>：不同类型的设备需要不同的驱动实现。</li></ul><h2 id="_4-优点和缺点-4" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-4" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-6" tabindex="-1">优点： <a class="header-anchor" href="#优点-6" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>提高了系统的可扩展性</strong>：可以独立地扩展抽象类和实现类。</li><li><strong>符合开闭原则</strong>：可以在不修改抽象和实现的情况下，引入新的实现。</li></ul><h3 id="缺点-6" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-6" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>增加了系统的复杂性</strong>：设计和理解桥接模式可能需要更高层次的抽象。</li></ul><h2 id="_5-总结-4" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-4" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>桥接模式是一个非常有用的工具，尤其适合于那些需要跨多个平台或需要支持多种操作方式的系统。正确应用此模式可以帮助系统保持足够的灵活性和可扩展性，从而应对不断变化的技术需求。</p><h2 id="装饰器模式" tabindex="-1">装饰器模式 <a class="header-anchor" href="#装饰器模式" aria-label="Permalink to &quot;装饰器模式&quot;">​</a></h2><h1 id="装饰器模式-动态扩展对象功能的设计艺术" tabindex="-1">装饰器模式：动态扩展对象功能的设计艺术 <a class="header-anchor" href="#装饰器模式-动态扩展对象功能的设计艺术" aria-label="Permalink to &quot;装饰器模式：动态扩展对象功能的设计艺术&quot;">​</a></h1><p>在面向对象设计中，装饰器模式是一种灵活的结构型模式，用于在不修改对象的基础上，动态地给一个对象添加额外的职责。这种模式通过创建一个包含原始对象的包装对象来实现功能的扩展，是继承关系的一个替代方案。本文将详细介绍装饰器模式的概念、实现方式、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/bee424d95fa043f6b6ffcccb8c8f523e.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-装饰器模式的定义" tabindex="-1">1. 装饰器模式的定义 <a class="header-anchor" href="#_1-装饰器模式的定义" aria-label="Permalink to &quot;1. 装饰器模式的定义&quot;">​</a></h2><p>装饰器模式（Decorator Pattern），也被称为包装器（Wrapper），允许向一个现有的对象添加新的功能，同时又不改变其结构。这种模式创建了一个装饰类，用来包装原有的类，并在保持原类方法签名完整性的前提下，提供了额外的功能。</p><h2 id="_2-实现装饰器模式" tabindex="-1">2. 实现装饰器模式 <a class="header-anchor" href="#_2-实现装饰器模式" aria-label="Permalink to &quot;2. 实现装饰器模式&quot;">​</a></h2><p>在Python中，装饰器模式可以通过使用类来实现，这些类包装了其他类的实例。以下是一个装饰器模式的简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;定义一个操作接口&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体实现类，实现了组件接口&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteComponent: Basic operation.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Decorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;装饰器抽象类，持有一个Component对象的引用，并定义一个与Component接口一致的接口&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, component):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> component</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component.operation()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteDecoratorA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Decorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体装饰器A，添加额外的功能&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteDecoratorA: Extended functionality before.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().operation()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteDecoratorA: Extended functionality after.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteDecoratorB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Decorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体装饰器B，添加额外的功能&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteDecoratorB: Extended functionality before.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().operation()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteDecoratorB: Extended functionality after.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">component </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteComponent()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decorator1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteDecoratorA(component)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decorator2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteDecoratorB(decorator1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decorator2.operation()</span></span></code></pre></div><h2 id="_3-装饰器模式的应用实例" tabindex="-1">3. 装饰器模式的应用实例 <a class="header-anchor" href="#_3-装饰器模式的应用实例" aria-label="Permalink to &quot;3. 装饰器模式的应用实例&quot;">​</a></h2><p>装饰器模式在软件开发中广泛应用于以下场景：</p><ul><li><strong>动态添加功能</strong>：在运行时为对象添加额外的功能。</li><li><strong>维护旧代码</strong>：为旧的或不可修改的代码添加新功能。</li><li><strong>功能组合</strong>：通过不同的装饰器以多种方式组合这些功能。</li></ul><h2 id="_4-优点和缺点-5" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-5" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-7" tabindex="-1">优点： <a class="header-anchor" href="#优点-7" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>提高了类的扩展性和灵活性，不需要通过修改现有的代码就可以增强对象。</li><li>符合单一职责原则，每个装饰类完成的只是单一的功能添加。</li><li>符合开闭原则，易于扩展与维护。</li></ul><h3 id="缺点-7" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-7" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>使用装饰器模式会增加系统的复杂性，可能会引入多层装饰，使系统维护更加困难。</li><li>多层装饰的使用可能会使系统性能受到一定影响。</li></ul><h2 id="_5-总结-5" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-5" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>装饰器模式是一个非常有用的工具，适用于那些需要动态地给对象添加职责的场景。它提供了一种灵活的替代扩展功能的方法，比继承更加灵活。正确的使用装饰器模式可以使系统更加灵活，易于扩展和维护。</p><h2 id="外观模式" tabindex="-1">外观模式 <a class="header-anchor" href="#外观模式" aria-label="Permalink to &quot;外观模式&quot;">​</a></h2><h1 id="外观模式-简化复杂系统的统一接口" tabindex="-1">外观模式：简化复杂系统的统一接口 <a class="header-anchor" href="#外观模式-简化复杂系统的统一接口" aria-label="Permalink to &quot;外观模式：简化复杂系统的统一接口&quot;">​</a></h1><p>在面向对象的软件开发中，外观模式是一种常用的结构型设计模式，旨在为复杂的系统提供一个简化的接口。通过创建一个统一的高级接口，这个模式帮助客户端通过一个简单的方式与复杂的子系统交互。本文将详细介绍外观模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/8a263fea7ab44a02bcf693721dcaa1f9.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-外观模式的定义" tabindex="-1">1. 外观模式的定义 <a class="header-anchor" href="#_1-外观模式的定义" aria-label="Permalink to &quot;1. 外观模式的定义&quot;">​</a></h2><p>外观模式（Facade Pattern）通过定义一个统一的接口，来封装多个复杂的子系统，使子系统更加容易使用。外观不仅简化了整个系统的接口，还将客户端从系统的复杂性中解耦。</p><h2 id="_2-实现外观模式" tabindex="-1">2. 实现外观模式 <a class="header-anchor" href="#_2-实现外观模式" aria-label="Permalink to &quot;2. 实现外观模式&quot;">​</a></h2><p>在Python中，实现外观模式通常涉及创建一个类来封装对各个子系统的调用。以下是一个实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subsystem1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;子系统1定义了一些复杂的逻辑，通常只能在系统内部使用。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subsystem1: Ready!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subsystem1: Go!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subsystem2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;子系统2和子系统1功能相似，实现了一些独立的功能。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subsystem2: Get ready!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subsystem2: Fire!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Facade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;外观类提供了简单的接口来访问复杂的子系统逻辑。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, subsystem1, subsystem2):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._subsystem1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subsystem1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Subsystem1()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._subsystem2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subsystem2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Subsystem2()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Facade initializes subsystems:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._subsystem1.operation1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._subsystem2.operation1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Facade orders subsystems to perform the action:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._subsystem1.operation2()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._subsystem2.operation2()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">facade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Facade(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(facade.operation())</span></span></code></pre></div><h2 id="_3-外观模式的应用实例" tabindex="-1">3. 外观模式的应用实例 <a class="header-anchor" href="#_3-外观模式的应用实例" aria-label="Permalink to &quot;3. 外观模式的应用实例&quot;">​</a></h2><p>外观模式在软件开发中有广泛的应用，尤其适用于以下场景：</p><ul><li><strong>系统很复杂或者有多个依赖的子系统时</strong>：通过外观提供一个简单的接口，使得子系统更容易使用。</li><li><strong>分层结构</strong>：在多层结构中使用外观作为每一层的入口点，可以简化层间的通信。</li></ul><h2 id="_4-优点和缺点-6" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-6" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-8" tabindex="-1">优点： <a class="header-anchor" href="#优点-8" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>简化了客户端的操作：通过使用外观，客户端可以通过单一简单的接口与复杂的子系统进行交互。</li><li>减少系统与客户端之间的耦合：外观可以让子系统更容易独立于客户端演化和操作。</li></ul><h3 id="缺点-8" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-8" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>不符合开闭原则：添加新的子系统可能需要修改外观类或客户端的源代码，这可能会带来风险。</li></ul><h2 id="_5-总结-6" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-6" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>外观模式提供了一种有效的方式来隐藏系统的复杂性，并提供一个客户端可以轻松访问的接口。在您需要为复杂的子系统提供一个简单的接口时，考虑使用外观模式，这将大大降低实现复杂度和维护成本。</p><h2 id="组合模式" tabindex="-1">组合模式 <a class="header-anchor" href="#组合模式" aria-label="Permalink to &quot;组合模式&quot;">​</a></h2><h1 id="组合模式-构建树形对象结构的设计艺术" tabindex="-1">组合模式：构建树形对象结构的设计艺术 <a class="header-anchor" href="#组合模式-构建树形对象结构的设计艺术" aria-label="Permalink to &quot;组合模式：构建树形对象结构的设计艺术&quot;">​</a></h1><p>在软件开发中，组合模式是一种结构型设计模式，用于表示对象的部分-整体层次结构。通过使单个对象和组合对象具有相同的接口，这种模式允许客户端以统一的方式处理单个对象和组合对象。本文将详细介绍组合模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/b32677d307ed4573ab63668b47ef1824.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-组合模式的定义" tabindex="-1">1. 组合模式的定义 <a class="header-anchor" href="#_1-组合模式的定义" aria-label="Permalink to &quot;1. 组合模式的定义&quot;">​</a></h2><p>组合模式（Composite Pattern）使得客户端对单个对象和组合对象的使用具有一致性。它可以用来创建复杂的树形结构，其中每个节点可以是另一个更复杂的结构（如子树）或者是简单的单个对象。</p><h2 id="_2-实现组合模式" tabindex="-1">2. 实现组合模式 <a class="header-anchor" href="#_2-实现组合模式" aria-label="Permalink to &quot;2. 实现组合模式&quot;">​</a></h2><p>在Python中，实现组合模式通常涉及创建一个抽象类或接口，以及实现这个接口的一些具体类。以下是一个组合模式的简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;抽象组件类定义了叶节点和容器的共同接口。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, component):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, component):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Leaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;叶节点代表树形结构的末端对象，没有子节点。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Leaf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;复合组件代表有子节点的对象。存储子部件，并实现与子部件相关的操作。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, component):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.children.append(component)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, component):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.children.remove(component)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.children:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            child.operation()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">leaf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Leaf()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Composite()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composite.add(leaf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composite.operation()</span></span></code></pre></div><h2 id="_3-组合模式的应用实例" tabindex="-1">3. 组合模式的应用实例 <a class="header-anchor" href="#_3-组合模式的应用实例" aria-label="Permalink to &quot;3. 组合模式的应用实例&quot;">​</a></h2><p>组合模式广泛应用于需要表示部分-整体层次结构的场景，如：</p><ul><li><strong>图形编辑器</strong>：管理和操作复杂图形的组合，其中每个元素可以是简单或复合对象。</li><li><strong>文件系统</strong>：表示文件和文件夹的结构。</li><li><strong>UI组件</strong>：构建和操作复杂的用户界面组件树。</li></ul><h2 id="_4-优点和缺点-7" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-7" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-9" tabindex="-1">优点： <a class="header-anchor" href="#优点-9" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li><strong>简化客户端代码</strong>：客户端可以一致地处理简单或复杂的元素。</li><li><strong>增加新类型的组件容易</strong>：符合开闭原则，易于添加新组件。</li></ul><h3 id="缺点-9" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-9" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li><strong>设计更复杂</strong>：需要仔细设计接口和类的层次结构。</li><li><strong>难以限制组件的类型</strong>：不容易限制组合中的组件类型，可能需要在运行时进行检查。</li></ul><h2 id="_5-总结-7" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-7" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>组合模式提供了管理复杂对象集合的强大工具，尤其适用于那些需要操作部分-整体层次结构的应用。通过一致的接口，组合模式使得单个对象和组合对象的使用具有高度的灵活性和一致性。</p><h2 id="享元模式" tabindex="-1">享元模式 <a class="header-anchor" href="#享元模式" aria-label="Permalink to &quot;享元模式&quot;">​</a></h2><h1 id="享元模式-优化资源利用的高效策略" tabindex="-1">享元模式：优化资源利用的高效策略 <a class="header-anchor" href="#享元模式-优化资源利用的高效策略" aria-label="Permalink to &quot;享元模式：优化资源利用的高效策略&quot;">​</a></h1><p>在面向对象的软件开发中，享元模式是一种结构型设计模式，旨在减少内存使用，通过共享尽可能多的相似对象来提高应用程序的效率。本文将详细介绍享元模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/5b7cf6a4360b4c648d33afdb0cdcffa7.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-享元模式的定义" tabindex="-1">1. 享元模式的定义 <a class="header-anchor" href="#_1-享元模式的定义" aria-label="Permalink to &quot;1. 享元模式的定义&quot;">​</a></h2><p>享元模式（Flyweight Pattern）通过共享技术实现相似对象的重用，这种模式通常用于处理大量对象时的性能优化。它主要分为两部分：享元对象（flyweight）和享元工厂（factory）。享元对象中存储了可以共享的状态，称为内在状态，而每个对象特有的状态称为外在状态，由客户端保存。</p><h2 id="_2-实现享元模式" tabindex="-1">2. 实现享元模式 <a class="header-anchor" href="#_2-实现享元模式" aria-label="Permalink to &quot;2. 实现享元模式&quot;">​</a></h2><p>在Python中，实现享元模式涉及创建一个享元工厂以及定义享元对象。以下是享元模式的简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flyweight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;享元类包含一个部分共享的状态（内在状态）。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, shared_state):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._shared_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shared_state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, unique_state):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._shared_state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unique_state</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Flyweight: Displaying shared (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) and unique (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) state.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FlyweightFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;享元工厂管理享元对象池并确保合理地共享享元。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _flyweights </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, initial_flyweights):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initial_flyweights:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._flyweights[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_key(state)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flyweight(state)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, state):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;根据享元的状态返回一个键。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_flyweight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, shared_state):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_key(shared_state)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._flyweights.get(key):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FlyweightFactory: Can&#39;t find a flyweight, creating new one.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._flyweights[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flyweight(shared_state)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FlyweightFactory: Reusing existing flyweight.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._flyweights[key]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list_flyweights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._flyweights)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FlyweightFactory: I have </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flyweights:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._flyweights.keys())))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FlyweightFactory([(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cheese&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tomato&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dough&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cheese&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">factory.list_flyweights()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加一个新享元</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flyweight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.get_flyweight([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cheese&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tomato&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flyweight.operation([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Extra tomato&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重用现有享元</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flyweight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory.get_flyweight([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dough&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cheese&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flyweight.operation([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Garlic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h2 id="_3-享元模式的应用实例" tabindex="-1">3. 享元模式的应用实例 <a class="header-anchor" href="#_3-享元模式的应用实例" aria-label="Permalink to &quot;3. 享元模式的应用实例&quot;">​</a></h2><p>享元模式在需要处理大量对象时非常有用，如：</p><ul><li><strong>图形编辑器</strong>：管理成千上万的细粒度对象，如字符或行。</li><li><strong>网络游戏</strong>：大量的玩家对象可以共享部分状态，如纹理、模型。</li><li><strong>数据库连接池</strong>：共享和重用连接对象，而不是为每次查询创建新连接。</li></ul><h2 id="_4-优点和缺点-8" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-8" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-10" tabindex="-1">优点： <a class="header-anchor" href="#优点-10" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>大幅减少内存使用。</li><li>可以减少系统中对象的数量，提高性能。</li></ul><h3 id="缺点-10" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-10" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>增加系统复杂性，需要区分内外部状态。</li><li>需要妥善处理线程安全问题，特别是在多线程环境中。</li></ul><h2 id="_5-总结-8" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-8" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>享元模式是一种有效的优化策略，适用于系统中存在大量相似对象的场景。正确的使用享元模式可以显著降低程序的内存占用和提高效率。然而，这也需要仔细设计系统的存储结构和状态管理。</p><h1 id="行为型" tabindex="-1">行为型 <a class="header-anchor" href="#行为型" aria-label="Permalink to &quot;行为型&quot;">​</a></h1><p>行为型模式特别关注对象之间的通信。</p><h2 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h2><h1 id="观察者模式-实现高效事件驱动编程的策略" tabindex="-1">观察者模式：实现高效事件驱动编程的策略 <a class="header-anchor" href="#观察者模式-实现高效事件驱动编程的策略" aria-label="Permalink to &quot;观察者模式：实现高效事件驱动编程的策略&quot;">​</a></h1><p>在软件开发中，观察者模式是一种关键的行为型设计模式，用于建立对象间的一种依赖关系，使得当一个对象改变状态时，所有依赖于它的对象都会得到通知并被自动更新。这种模式是事件监听和响应编程的基石。本文将详细介绍观察者模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/b1ffce1d2fdd4c359196e440cd7df0e0.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-观察者模式的定义" tabindex="-1">1. 观察者模式的定义 <a class="header-anchor" href="#_1-观察者模式的定义" aria-label="Permalink to &quot;1. 观察者模式的定义&quot;">​</a></h2><p>观察者模式（Observer Pattern）也被称为发布-订阅（Pub-Sub）模式。在这种模式中，被称为“主题”（Subject）的对象维护一系列依赖于它的对象，称为“观察者”（Observers），主题在状态变化时通知所有观察者，以便它们能够自动更新自己。</p><h2 id="_2-实现观察者模式" tabindex="-1">2. 实现观察者模式 <a class="header-anchor" href="#_2-实现观察者模式" aria-label="Permalink to &quot;2. 实现观察者模式&quot;">​</a></h2><p>在Python中，实现观察者模式涉及创建主题和观察者两种角色的类。以下是一个观察者模式的简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;主题，被观察者&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._observers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, observer):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> observer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._observers:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._observers.append(observer)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> detach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, observer):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._observers.remove(observer)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;通知所有注册的观察者&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> observer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._observers:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            observer.update(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteSubject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体主题，状态改变时会触发通知&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @state.setter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.notify()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Observer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;观察者基类&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, subject):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Observer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体观察者，响应通知进行自我更新&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, subject):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Observer: Reacted to the change in subject&#39;s state to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject.state</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteSubject()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">observer_a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteObserver()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject.attach(observer_a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 观察者会自动被通知并更新</span></span></code></pre></div><h2 id="_3-观察者模式的应用实例" tabindex="-1">3. 观察者模式的应用实例 <a class="header-anchor" href="#_3-观察者模式的应用实例" aria-label="Permalink to &quot;3. 观察者模式的应用实例&quot;">​</a></h2><p>观察者模式在多种场景中有用，尤其适用于：</p><ul><li><strong>事件管理系统</strong>：在实现事件监听和通知机制时广泛使用。</li><li><strong>用户界面组件</strong>：如模型-视图-控制器（MVC）架构中的模型更新通知视图组件。</li><li><strong>分布式系统的交互</strong>：比如消息队列和事件驱动的服务。</li></ul><h2 id="_4-优点和缺点-9" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-9" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-11" tabindex="-1">优点： <a class="header-anchor" href="#优点-11" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>降低了对象间的耦合度。</li><li>支持简单的通信系统，使得对象间的通信自动化和实时更新。</li></ul><h3 id="缺点-11" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-11" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>可能导致设计非直观。</li><li>如果观察者和主题间存在循环依赖，可能导致系统行为不稳定。</li></ul><h2 id="_5-总结-9" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-9" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>观察者模式是实现动态和自动的通知与更新机制的有效方式，适用于处理复杂的依赖关系。通过合理使用这种模式，可以提高软件的灵活性和可维护性。</p><h2 id="策略模式" tabindex="-1">策略模式 <a class="header-anchor" href="#策略模式" aria-label="Permalink to &quot;策略模式&quot;">​</a></h2><h1 id="策略模式-灵活调整算法的设计精髓" tabindex="-1">策略模式：灵活调整算法的设计精髓 <a class="header-anchor" href="#策略模式-灵活调整算法的设计精髓" aria-label="Permalink to &quot;策略模式：灵活调整算法的设计精髓&quot;">​</a></h1><p>在软件开发中，策略模式是一种行为型设计模式，它允许在运行时选择算法的行为。通过定义一系列算法，并将每个算法封装起来，策略模式使得算法可以互换使用，这使得算法可以独立于使用它们的客户。本文将详细介绍策略模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/88b73ca6509544e497f3d85d030d5e4b.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-策略模式的定义" tabindex="-1">1. 策略模式的定义 <a class="header-anchor" href="#_1-策略模式的定义" aria-label="Permalink to &quot;1. 策略模式的定义&quot;">​</a></h2><p>策略模式（Strategy Pattern）允许定义一组算法，将每个算法封装起来，并使它们可以互换。策略模式使得算法可以独立于使用它们的客户端变化，也就是说，它支持“开闭原则”——对扩展开放，对修改封闭。</p><h2 id="_2-实现策略模式" tabindex="-1">2. 实现策略模式 <a class="header-anchor" href="#_2-实现策略模式" aria-label="Permalink to &quot;2. 实现策略模式&quot;">​</a></h2><p>在Python中，实现策略模式涉及创建一个表示各种策略的接口和一系列实现这些策略的具体策略类。以下是一个策略模式的简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;策略接口，定义了一个方法来执行一个算法。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteStrategyA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体策略A，实现算法的具体步骤。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteStrategyB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体策略B，实现另一种算法的具体步骤。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reversed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;上下文类，用于接受一个策略并执行其算法。&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, strategy: Strategy):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strategy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set_strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, strategy: Strategy):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strategy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_some_business_logic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, data):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._strategy.do_algorithm(data)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Context(ConcreteStrategyA())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.do_some_business_logic(data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.set_strategy(ConcreteStrategyB())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.do_some_business_logic(data)</span></span></code></pre></div><h2 id="_3-策略模式的应用实例" tabindex="-1">3. 策略模式的应用实例 <a class="header-anchor" href="#_3-策略模式的应用实例" aria-label="Permalink to &quot;3. 策略模式的应用实例&quot;">​</a></h2><p>策略模式在许多场景中非常有用，尤其适用于：</p><ul><li><strong>不同类型的排序</strong>：在需要对数据进行排序时，可以根据上下文选择最适合的排序算法。</li><li><strong>支付方式处理</strong>：在电子商务系统中，可以根据用户的支付方式选择不同的支付算法。</li><li><strong>压缩数据</strong>：选择不同的压缩算法来处理文件或数据。</li></ul><h2 id="_4-优点和缺点-10" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-10" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-12" tabindex="-1">优点： <a class="header-anchor" href="#优点-12" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>提高了算法的复用性和灵活性。</li><li>简化了单元测试，每个策略都可以独立测试。</li></ul><h3 id="缺点-12" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-12" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>客户端必须了解不同的策略。</li><li>增加了对象的数目。</li></ul><h2 id="_5-总结-10" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-10" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>策略模式是一种有效的软件设计模式，用于分离算法的选择和实现。通过策略模式，可以灵活地在运行时更改对象的行为，增加了代码的灵活性和可维护性。</p><h2 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h2><h1 id="命令模式-封装操作为对象的强大技术" tabindex="-1">命令模式：封装操作为对象的强大技术 <a class="header-anchor" href="#命令模式-封装操作为对象的强大技术" aria-label="Permalink to &quot;命令模式：封装操作为对象的强大技术&quot;">​</a></h1><p>在软件工程中，命令模式是一种行为型设计模式，它将一个请求或简单操作封装成一个对象。这种模式允许用户根据不同的请求对用户进行参数化处理，同时使得请求排队或记录请求日志以及支持可撤销的操作成为可能。本文将详细介绍命令模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/351affcf0c274e8788797201e2b6d3da.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-命令模式的定义" tabindex="-1">1. 命令模式的定义 <a class="header-anchor" href="#_1-命令模式的定义" aria-label="Permalink to &quot;1. 命令模式的定义&quot;">​</a></h2><p>命令模式（Command Pattern）使得你可以将操作封装成对象，从而让你将不同的请求、队列或日志请求以及支持撤销操作的功能嵌入到客户端中。在命令模式中，一个中心化的调用者（Invoker）调用命令对象执行操作，命令对象则封装了接收者（Receiver），即实际执行操作的对象。</p><h2 id="_2-实现命令模式" tabindex="-1">2. 实现命令模式 <a class="header-anchor" href="#_2-实现命令模式" aria-label="Permalink to &quot;2. 实现命令模式&quot;">​</a></h2><p>在Python中，实现命令模式通常涉及定义命令接口，具体命令类以及一个或多个接收者。以下是命令模式的简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;命令抽象类&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Light</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;接收者类，真正执行命令的类&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> turn_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The light is on&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> turn_off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The light is off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TurnOnCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体命令类，执行开灯的操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, light):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._light </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> light</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._light.turn_on()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TurnOffCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体命令类，执行关灯的操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, light):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._light </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> light</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._light.turn_off()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RemoteControl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;调用者类，通过它来调用命令&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, command):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        command.execute()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">light </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Light()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">turn_on_command </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TurnOnCommand(light)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">turn_off_command </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TurnOffCommand(light)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RemoteControl()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote.submit(turn_on_command)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote.submit(turn_off_command)</span></span></code></pre></div><h2 id="_3-命令模式的应用实例" tabindex="-1">3. 命令模式的应用实例 <a class="header-anchor" href="#_3-命令模式的应用实例" aria-label="Permalink to &quot;3. 命令模式的应用实例&quot;">​</a></h2><p>命令模式广泛应用于各种场景，尤其适用于：</p><ul><li><strong>用户界面按钮和菜单项</strong>：每个按钮和菜单项都可以是一个命令对象。</li><li><strong>操作历史</strong>：支持撤销和重做操作。</li><li><strong>事务行为</strong>：用于实现事务型行为，如数据库的事务管理。</li></ul><h2 id="_4-优点和缺点-11" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-11" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-13" tabindex="-1">优点： <a class="header-anchor" href="#优点-13" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>降低系统的耦合度。</li><li>增强了系统的灵活性和可扩展性。</li></ul><h3 id="缺点-13" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-13" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>可能导致某些系统有过多的具体命令类。</li></ul><h2 id="_5-总结-11" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-11" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>命令模式是一种非常有用的设计模式，适用于需要对操作进行参数化、记录操作日志以及实现操作撤销和恢复的场景。通过正确使用命令模式，可以有效地管理复杂的操作和请求。</p><h2 id="中介者模式" tabindex="-1">中介者模式 <a class="header-anchor" href="#中介者模式" aria-label="Permalink to &quot;中介者模式&quot;">​</a></h2><h1 id="中介者模式-简化对象间通信的协调者" tabindex="-1">中介者模式：简化对象间通信的协调者 <a class="header-anchor" href="#中介者模式-简化对象间通信的协调者" aria-label="Permalink to &quot;中介者模式：简化对象间通信的协调者&quot;">​</a></h1><p>在面向对象的软件开发中，中介者模式是一种重要的行为型设计模式，用于降低多个对象间通信的复杂性。通过提供一个中心化的对象来处理不同组件之间的交互，中介者模式使得组件间不必显式引用彼此，从而使其松散耦合、更易于维护。本文将详细介绍中介者模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/f3280c2e402a4db09f7c7052238e85e8.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-中介者模式的定义" tabindex="-1">1. 中介者模式的定义 <a class="header-anchor" href="#_1-中介者模式的定义" aria-label="Permalink to &quot;1. 中介者模式的定义&quot;">​</a></h2><p>中介者模式（Mediator Pattern）涉及一个中介对象，该对象封装了一系列对象间的交互方式。中介者使得各对象不需要显式地相互引用，从而使其耦合松散，并且可以独立地改变它们之间的交互。</p><h2 id="_2-实现中介者模式" tabindex="-1">2. 实现中介者模式 <a class="header-anchor" href="#_2-实现中介者模式" aria-label="Permalink to &quot;2. 实现中介者模式&quot;">​</a></h2><p>在Python中，实现中介者模式通常涉及创建一个中介者类和一系列可以与中介者交互的组件类。以下是一个简单的中介者模式实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mediator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;中介者接口，定义了用于通信的方法&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, sender, event):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteMediator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mediator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体的中介者实现，协调多个组件之间的交互&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, component1, component2):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> component1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component1.mediator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> component2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component2.mediator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, sender, event):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mediator reacts on A and triggers following operations:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component2.do_c()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Mediator reacts on D and triggers following operations:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._component1.do_b()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BaseComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;基础组件提供中介者的基础功能&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, mediator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._mediator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mediator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mediator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._mediator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @mediator.setter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mediator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, mediator):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._mediator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mediator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体组件1实现一些功能&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Component 1 does A.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mediator.notify(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Component 1 does B.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体组件2实现一些功能&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Component 2 does C.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Component 2 does D.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mediator.notify(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Component1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Component2()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mediator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteMediator(c1, c2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c1.do_a()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c2.do_d()</span></span></code></pre></div><h2 id="_3-中介者模式的应用实例" tabindex="-1">3. 中介者模式的应用实例 <a class="header-anchor" href="#_3-中介者模式的应用实例" aria-label="Permalink to &quot;3. 中介者模式的应用实例&quot;">​</a></h2><p>中介者模式在许多场景中非常有用，尤其适用于：</p><ul><li><strong>用户界面开发</strong>：在复杂的用户界面中管理多个组件之间的交互。</li><li><strong>系统内部通信</strong>：如服务间的消息传递和事件处理系统。</li></ul><h2 id="_4-优点和缺点-12" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-12" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-14" tabindex="-1">优点： <a class="header-anchor" href="#优点-14" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>减少了类间的依赖，将一对多的依赖变成了一对一的依赖。</li><li>中心化的控制交互逻辑，使得修改更加简单。</li></ul><h3 id="缺点-14" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-14" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>中介者可能会变得过于复杂，自身成为一个难以维护的庞大类。</li></ul><h2 id="_5-总结-12" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-12" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>中介者模式提供了一种有效的方式来减少多个组件间的直接交互，简化了系统的维护和扩展。正确使用这种模式可以提高系统的灵活性和可维护性，尤其在处理复杂的交互系统时表现出色。</p><h2 id="备忘录模式" tabindex="-1">备忘录模式 <a class="header-anchor" href="#备忘录模式" aria-label="Permalink to &quot;备忘录模式&quot;">​</a></h2><h1 id="备忘录模式-恢复对象状态的智能方式" tabindex="-1">备忘录模式：恢复对象状态的智能方式 <a class="header-anchor" href="#备忘录模式-恢复对象状态的智能方式" aria-label="Permalink to &quot;备忘录模式：恢复对象状态的智能方式&quot;">​</a></h1><p>在软件开发中，备忘录模式是一种行为型设计模式，它允许捕获并外部化对象的内部状态，以便在未来某个时刻可以将对象恢复到此状态。这种模式是撤销操作或者回滚操作的关键实现机制。本文将详细介绍备忘录模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/85c6e5c324bb4ae39cda583665f63ffe.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-备忘录模式的定义" tabindex="-1">1. 备忘录模式的定义 <a class="header-anchor" href="#_1-备忘录模式的定义" aria-label="Permalink to &quot;1. 备忘录模式的定义&quot;">​</a></h2><p>备忘录模式（Memento Pattern）提供了一种方式，使得对象能保存其当前状态，并在需要时恢复到这个状态，而不暴露对象的实现细节。备忘录模式通常涉及三个参与者：原发器（Originator），备忘录（Memento），和管理者（Caretaker）。</p><h2 id="_2-实现备忘录模式" tabindex="-1">2. 实现备忘录模式 <a class="header-anchor" href="#_2-实现备忘录模式" aria-label="Permalink to &quot;2. 实现备忘录模式&quot;">​</a></h2><p>在Python中，实现备忘录模式通常涉及创建备忘录类以保存原发器对象的状态，原发器类以管理状态，以及管理者类以保管备忘录。以下是备忘录模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Memento</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;备忘录，存储原发器对象的状态&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, state):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy.deepcopy(state)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_saved_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Originator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;原发器，创建一个备忘录，用以记录当前时刻它的内部状态&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, state):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, state):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Originator: Setting state to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> save_to_memento</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Originator: Saving to Memento.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Memento(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> restore_from_memento</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, memento):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memento.get_saved_state()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Originator: State after restoring from Memento: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Caretaker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;管理者，负责保存好备忘录&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._saved_states </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_memento</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, memento):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._saved_states.append(memento)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_memento</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, index):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._saved_states[index]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">originator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Originator(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Initial State&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caretaker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Caretaker()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caretaker.add_memento(originator.save_to_memento())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">originator.set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;State #1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">caretaker.add_memento(originator.save_to_memento())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">originator.set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;State #2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">originator.restore_from_memento(caretaker.get_memento(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="_3-备忘录模式的应用实例" tabindex="-1">3. 备忘录模式的应用实例 <a class="header-anchor" href="#_3-备忘录模式的应用实例" aria-label="Permalink to &quot;3. 备忘录模式的应用实例&quot;">​</a></h2><p>备忘录模式在许多场景中非常有用，尤其适用于：</p><ul><li><strong>软件撤销操作</strong>：允许用户撤销或恢复命令。</li><li><strong>游戏保存和加载</strong>：保存当前游戏状态，以便可以从相同点重新开始。</li><li><strong>数据库事务管理</strong>：用于事务的回滚，恢复到事务开始前的状态。</li></ul><h2 id="_4-优点和缺点-13" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-13" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-15" tabindex="-1">优点： <a class="header-anchor" href="#优点-15" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>提供了一种恢复状态的清晰机制。</li><li>通过保存历史记录来支持撤销操作。</li></ul><h3 id="缺点-15" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-15" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>可能消耗大量内存，如果状态历史保持不当。</li><li>实现可能相对复杂，需要维护适当的备忘录和原发器状态。</li></ul><h2 id="_5-总结-13" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-13" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>备忘录模式是一个极其有用的设计模式，尤其在需要撤销和恢复功能的复杂系统中。正确的使用备忘录模式可以显著提高系统的可靠性和用户体验。</p><h2 id="模板方法模式" tabindex="-1">模板方法模式 <a class="header-anchor" href="#模板方法模式" aria-label="Permalink to &quot;模板方法模式&quot;">​</a></h2><h1 id="模板方法模式-定义算法骨架的设计策略" tabindex="-1">模板方法模式：定义算法骨架的设计策略 <a class="header-anchor" href="#模板方法模式-定义算法骨架的设计策略" aria-label="Permalink to &quot;模板方法模式：定义算法骨架的设计策略&quot;">​</a></h1><p>在软件开发中，模板方法模式是一种行为型设计模式，它在父类中定义一个操作的算法框架，允许子类在不改变算法结构的情况下重定义算法的某些步骤。这种模式是基于继承的基本原则，通过抽象类达到代码复用的目的。本文将详细介绍模板方法模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/c041e939c76b40ccaa6d49d70d907096.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-模板方法模式的定义" tabindex="-1">1. 模板方法模式的定义 <a class="header-anchor" href="#_1-模板方法模式的定义" aria-label="Permalink to &quot;1. 模板方法模式的定义&quot;">​</a></h2><p>模板方法模式（Template Method Pattern）允许子类在不改变算法结构的前提下重新定义算法中的某些步骤。这是通过在父类中定义一个方法来完成，这个方法封装了所需的算法步骤，其中一些步骤可以由子类实现。</p><h2 id="_2-实现模板方法模式" tabindex="-1">2. 实现模板方法模式 <a class="header-anchor" href="#_2-实现模板方法模式" aria-label="Permalink to &quot;2. 实现模板方法模式&quot;">​</a></h2><p>在Python中，实现模板方法模式通常涉及创建一个抽象基类，其中包含一个模板方法，这个方法按顺序调用其他抽象或具体方法。以下是模板方法模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;抽象类定义模板方法框架&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;模板方法定义算法的框架&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.base_operation()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.required_operations1()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hook1()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.required_operations2()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hook2()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base_operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AbstractClass says: I am doing the bulk of the work&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required_operations1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required_operations2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hook1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hook2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteClass1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体类实现抽象类的操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required_operations1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteClass1 says: Implemented Operation1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required_operations2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteClass1 says: Implemented Operation2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteClass2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体类实现抽象类的操作以及覆盖钩子方法&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required_operations1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteClass2 says: Implemented Operation1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> required_operations2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteClass2 says: Implemented Operation2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hook1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteClass2 says: Overridden Hook1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> client_code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abstract_class: AbstractClass):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;客户端代码调用模板方法来执行算法&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    abstract_class.template_method()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_code(ConcreteClass1())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client_code(ConcreteClass2())</span></span></code></pre></div><h2 id="_3-模板方法模式的应用实例" tabindex="-1">3. 模板方法模式的应用实例 <a class="header-anchor" href="#_3-模板方法模式的应用实例" aria-label="Permalink to &quot;3. 模板方法模式的应用实例&quot;">​</a></h2><p>模板方法模式在许多场景中非常有用，尤其适用于：</p><ul><li><strong>软件框架</strong>：定义框架的骨架，允许用户扩展特定的操作。</li><li><strong>算法库</strong>：提供算法的基本步骤，让用户自定义特定步骤的实现。</li><li><strong>生命周期管理</strong>：在需要控制复杂对象生命周期的场景中。</li></ul><h2 id="_4-优点和缺点-14" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-14" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-16" tabindex="-1">优点： <a class="header-anchor" href="#优点-16" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>提供了代码复用和扩展的强大手段。</li><li>利用模板方法实现了反向控制，即父类调用子类操作。</li></ul><h3 id="缺点-16" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-16" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>可能导致由于子类扩展方法过多而导致系统更加复杂。</li></ul><h2 id="_5-总结-14" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-14" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>模板方法模式通过定义一个操作的主要算法框架，并允许子类提供具体的行为实现，提供了一种构建可扩展应用程序的强大方法。这种模式特别适用于一些固定算法框架的场景，但需要在具体情况中灵活应用。</p><h2 id="迭代器模式" tabindex="-1">迭代器模式 <a class="header-anchor" href="#迭代器模式" aria-label="Permalink to &quot;迭代器模式&quot;">​</a></h2><h1 id="迭代器模式-统一访问集合元素的优雅方式" tabindex="-1">迭代器模式：统一访问集合元素的优雅方式 <a class="header-anchor" href="#迭代器模式-统一访问集合元素的优雅方式" aria-label="Permalink to &quot;迭代器模式：统一访问集合元素的优雅方式&quot;">​</a></h1><p>在面向对象的软件开发中，迭代器模式是一种行为型设计模式，它提供了一种方法来顺序访问一个聚合对象中的各个元素，而又无需暴露该对象的内部表示。这种模式是集合处理特别是遍历集合的核心机制。本文将详细介绍迭代器模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/8117e219dc4e4ac7a83be49880514b15.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-迭代器模式的定义" tabindex="-1">1. 迭代器模式的定义 <a class="header-anchor" href="#_1-迭代器模式的定义" aria-label="Permalink to &quot;1. 迭代器模式的定义&quot;">​</a></h2><p>迭代器模式（Iterator Pattern）允许顺序访问聚合对象的元素而不需要知道其底层的表示，通过定义一个统一的接口来遍历所有元素，从而分离集合对象的遍历行为。在这种模式中，集合通常被称为“聚合”或“容器”，而迭代器用于遍历聚合中的元素。</p><h2 id="_2-实现迭代器模式" tabindex="-1">2. 实现迭代器模式 <a class="header-anchor" href="#_2-实现迭代器模式" aria-label="Permalink to &quot;2. 实现迭代器模式&quot;">​</a></h2><p>在Python中，实现迭代器模式通常涉及创建一个迭代器接口和一个具体迭代器类。以下是迭代器模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collections.abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Iterable, Iterator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteAggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Iterable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体聚合类&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, items):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __iter__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteIterator(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._items)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体迭代器类&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, aggregate):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._aggregate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aggregate</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __next__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._aggregate[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._index]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IndexError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StopIteration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aggregate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteAggregate([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iterator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aggregate)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iterator:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span></code></pre></div><h2 id="_3-迭代器模式的应用实例" tabindex="-1">3. 迭代器模式的应用实例 <a class="header-anchor" href="#_3-迭代器模式的应用实例" aria-label="Permalink to &quot;3. 迭代器模式的应用实例&quot;">​</a></h2><p>迭代器模式在许多场景中非常有用，尤其适用于：</p><ul><li><strong>数据集合的遍历</strong>：如列表、树、图等数据结构的遍历。</li><li><strong>抽象数据类型</strong>：如堆栈、队列、列表等，提供一个统一的接口来遍历各种类型的数据结构。</li><li><strong>支持多种遍历</strong>：在同一个聚合上可以有多种遍历方式，每种方式用不同的迭代器实现。</li></ul><h2 id="_4-优点和缺点-15" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-15" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-17" tabindex="-1">优点： <a class="header-anchor" href="#优点-17" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>支持多种遍历操作，而不必修改聚合对象。</li><li>可以同时在不同的集合上进行迭代。</li></ul><h3 id="缺点-17" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-17" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>对于比较简单的集合遍历，使用迭代器模式可能会过于复杂。</li></ul><h2 id="_5-总结-15" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-15" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>迭代器模式是一种简洁且强大的模式，用于分离集合对象的遍历行为。通过使用迭代器，可以简化集合的接口并支持多种遍历方式，使得代码更加灵活和可重用。</p><h2 id="状态模式" tabindex="-1">状态模式 <a class="header-anchor" href="#状态模式" aria-label="Permalink to &quot;状态模式&quot;">​</a></h2><h1 id="状态模式-管理对象状态转换的动态策略" tabindex="-1">状态模式：管理对象状态转换的动态策略 <a class="header-anchor" href="#状态模式-管理对象状态转换的动态策略" aria-label="Permalink to &quot;状态模式：管理对象状态转换的动态策略&quot;">​</a></h1><p>在软件开发中，状态模式是一种行为型设计模式，它允许一个对象在其内部状态改变时改变它的行为。这种模式把与特定状态相关的行为局部化，并且将不同状态的行为分散到对应的状态类中，使得状态和行为可以独立变化。本文将详细介绍状态模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/de7a9048516c4939a15c839cb2e0f39f.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-状态模式的定义" tabindex="-1">1. 状态模式的定义 <a class="header-anchor" href="#_1-状态模式的定义" aria-label="Permalink to &quot;1. 状态模式的定义&quot;">​</a></h2><p>状态模式（State Pattern）使得一个对象能够在其内部状态改变时，改变其行为。这看起来像是该对象改变了它的类。状态模式主要涉及两个概念：上下文（Context）和状态（State）。上下文是用户主要交互的对象，持有一个指向当前状态对象的引用，该引用可以根据情况被替换成不同状态的对象。</p><h2 id="_2-实现状态模式" tabindex="-1">2. 实现状态模式 <a class="header-anchor" href="#_2-实现状态模式" aria-label="Permalink to &quot;2. 实现状态模式&quot;">​</a></h2><p>在Python中，实现状态模式通常涉及创建一个状态接口和多个具体状态类。以下是状态模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;状态抽象基类&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteStateA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体状态A&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Turning from State A to State B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteStateB()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteStateB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体状态B&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Turning from State B to State A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteStateA()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;上下文类，维持一个指向当前状态对象的引用&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, state):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @state.setter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._state.handle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Context(ConcreteStateA())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.request()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Turning from State A to State B</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context.request()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Turning from State B to State A</span></span></code></pre></div><h2 id="_3-状态模式的应用实例" tabindex="-1">3. 状态模式的应用实例 <a class="header-anchor" href="#_3-状态模式的应用实例" aria-label="Permalink to &quot;3. 状态模式的应用实例&quot;">​</a></h2><p>状态模式在多种场景中非常有用，尤其适用于：</p><ul><li><strong>工作流管理</strong>：如工作流或游戏中的状态管理。</li><li><strong>UI控件状态</strong>：不同状态下UI控件的行为。</li><li><strong>门的状态</strong>：如一个自动门可以有打开、关闭和锁定状态。</li></ul><h2 id="_4-优点和缺点-16" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-16" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-18" tabindex="-1">优点： <a class="header-anchor" href="#优点-18" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>封装了转换规则。</li><li>枚举可能的状态，在编译时间内发现不兼容的状态转换。</li><li>将所有与某个状态相关的行为都放入一个对象中。</li></ul><h3 id="缺点-18" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-18" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>如果状态多且复杂，会导致状态类的增多，系统变得复杂。</li></ul><h2 id="_5-总结-16" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-16" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>状态模式是处理对象在不同状态转换时行为的有效方式，它提供了一种清晰的方式来组织涉及状态的代码，适合处理复杂的状态逻辑问题。</p><h2 id="责任链模式" tabindex="-1">责任链模式 <a class="header-anchor" href="#责任链模式" aria-label="Permalink to &quot;责任链模式&quot;">​</a></h2><h1 id="责任链模式-灵活处理请求的分级策略" tabindex="-1">责任链模式：灵活处理请求的分级策略 <a class="header-anchor" href="#责任链模式-灵活处理请求的分级策略" aria-label="Permalink to &quot;责任链模式：灵活处理请求的分级策略&quot;">​</a></h1><p>在软件开发中，责任链模式是一种行为型设计模式，它为请求创建一个接收者对象的链。这种模式使一个请求的发送者和接收者解耦，并给多个对象一个机会能处理这个请求。请求在链中传递直到一个对象处理它为止。本文将详细介绍责任链模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/9166f271b92346f5a8e459c5e789d6ff.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-责任链模式的定义" tabindex="-1">1. 责任链模式的定义 <a class="header-anchor" href="#_1-责任链模式的定义" aria-label="Permalink to &quot;1. 责任链模式的定义&quot;">​</a></h2><p>责任链模式（Chain of Responsibility Pattern）使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><h2 id="_2-实现责任链模式" tabindex="-1">2. 实现责任链模式 <a class="header-anchor" href="#_2-实现责任链模式" aria-label="Permalink to &quot;2. 实现责任链模式&quot;">​</a></h2><p>在Python中，实现责任链模式通常涉及创建一个处理器接口和一系列具体处理器类。以下是责任链模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;处理器抽象类，定义一个处理请求的接口，如果可处理则处理，否则转发给后继者&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, handler):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;抽象处理器实现基本的链接和转发功能&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _next_handler: Handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set_next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, handler: Handler):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._next_handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._next_handler:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._next_handler.handle(request)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteHandler1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体处理器类1，处理它所负责的请求，如果不负责，则转发给后继者&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Request1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteHandler1: Handled </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().handle(request)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteHandler2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体处理器类2&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Request2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteHandler2: Handled </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().handle(request)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handler1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteHandler1()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handler2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteHandler2()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handler1.set_next(handler2)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发送请求</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler1.handle(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Request2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: ConcreteHandler2: Handled Request2</span></span></code></pre></div><h2 id="_3-责任链模式的应用实例" tabindex="-1">3. 责任链模式的应用实例 <a class="header-anchor" href="#_3-责任链模式的应用实例" aria-label="Permalink to &quot;3. 责任链模式的应用实例&quot;">​</a></h2><p>责任链模式在多种场景中非常有用，尤其适用于：</p><ul><li><strong>审批流程</strong>：如工作流中的不同级别审批。</li><li><strong>事件处理系统</strong>：如 GUI 中的事件传递。</li><li><strong>操作处理</strong>：如不同命令的处理。</li></ul><h2 id="_4-优点和缺点-17" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-17" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-19" tabindex="-1">优点： <a class="header-anchor" href="#优点-19" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>降低耦合度。它将请求的发送者和接收者解耦。</li><li>增强了给对象指派职责的灵活性。通过改变链内的成员或调整它们的次序，允许动态地新增或删除责任。</li></ul><h3 id="缺点-19" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-19" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>不能保证请求一定被接收。因为请求没有明确的接收者，所以请求可能会到达链的末端都得不到处理。</li><li>设计不当可能会导致循环调用，导致系统性能受影响。</li></ul><h2 id="_5-总结-17" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-17" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>责任链模式提供了一种很好的方式来处理不确定的请求处理场景，通过构建一条链来管理请求的处理，可以实现请求处理的灵活控制和权限分配。正确使用这种模式可以显著简化对象之间的连接关系，使系统更易于理解和维护。</p><h2 id="解释器模式" tabindex="-1">解释器模式 <a class="header-anchor" href="#解释器模式" aria-label="Permalink to &quot;解释器模式&quot;">​</a></h2><h1 id="解释器模式-专为语言处理定制的模式" tabindex="-1">解释器模式：专为语言处理定制的模式 <a class="header-anchor" href="#解释器模式-专为语言处理定制的模式" aria-label="Permalink to &quot;解释器模式：专为语言处理定制的模式&quot;">​</a></h1><p>在软件开发中，解释器模式是一种特定的行为型设计模式，它用于定义一种语法，并提供一个解释器来解释这种语法或表达式。这种模式用于专门的情况，当有一个简单的语言需要解释时，它可以被用来表达实例的规则。本文将详细介绍解释器模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/fd8bd9e9f92640b5b0a9d1df21cc8424.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-解释器模式的定义" tabindex="-1">1. 解释器模式的定义 <a class="header-anchor" href="#_1-解释器模式的定义" aria-label="Permalink to &quot;1. 解释器模式的定义&quot;">​</a></h2><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式通常用于SQL解析、符号处理引擎等。</p><h2 id="_2-实现解释器模式" tabindex="-1">2. 实现解释器模式 <a class="header-anchor" href="#_2-实现解释器模式" aria-label="Permalink to &quot;2. 实现解释器模式&quot;">​</a></h2><p>在Python中，实现解释器模式通常涉及创建一个表达式接口和几个实现这个接口的具体类。以下是解释器模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;抽象表达式类，声明一个解释操作，这个接口为解释特定的上下文&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interpret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;终端表达式，实现与语法规则相关的解释操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interpret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;data&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NonterminalExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;非终端表达式，为文法中的规则提供解释操作的类，它包含对其他表达式的引用&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, expression):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._expression </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interpret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">._expression.interpret(context)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;data&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terminal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TerminalExpression()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(terminal.interpret(context))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">non_terminal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NonterminalExpression(terminal)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(non_terminal.interpret(context))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span></code></pre></div><h2 id="_3-解释器模式的应用实例" tabindex="-1">3. 解释器模式的应用实例 <a class="header-anchor" href="#_3-解释器模式的应用实例" aria-label="Permalink to &quot;3. 解释器模式的应用实例&quot;">​</a></h2><p>解释器模式适用于以下几种情况：</p><ul><li><strong>专门的编程和脚本语言</strong>：如需要解释程序配置选项的小型语言。</li><li><strong>编译器和语法分析器</strong>：如解释编程语言的源代码。</li><li><strong>正则表达式</strong>：正则表达式引擎是解释器模式的一个经典应用。</li></ul><h2 id="_4-优点和缺点-18" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-18" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-20" tabindex="-1">优点： <a class="header-anchor" href="#优点-20" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>易于改变和扩展文法。</li><li>实现文法较为容易。</li></ul><h3 id="缺点-20" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-20" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>对于复杂的文法，维护一个大的解释器可能相对困难。</li><li>增加了系统复杂性。</li></ul><h2 id="_5-总结-18" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-18" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>解释器模式是用于特定类型的问题，如语言解析，它可以提供一种灵活的设计解决方案。然而，对于更复杂的规则和文法，可能需要考虑使用解析工具或专用框架以降低系统复杂性。</p><h2 id="访问者模式" tabindex="-1">访问者模式 <a class="header-anchor" href="#访问者模式" aria-label="Permalink to &quot;访问者模式&quot;">​</a></h2><h1 id="访问者模式-处理复杂对象结构的灵活方式" tabindex="-1">访问者模式：处理复杂对象结构的灵活方式 <a class="header-anchor" href="#访问者模式-处理复杂对象结构的灵活方式" aria-label="Permalink to &quot;访问者模式：处理复杂对象结构的灵活方式&quot;">​</a></h1><p>在软件开发中，访问者模式是一种行为型设计模式，用于将操作与对象的结构分离。这种模式允许在不修改现有对象结构的情况下定义新的操作。访问者模式特别适用于处理复杂对象结构，如树形结构，使得可以在运行时添加新的操作而无需改变结构的代码。本文将详细介绍访问者模式的定义、实现、应用场景以及优缺点。 <img src="https://img-blog.csdnimg.cn/direct/d32d9eda593c46768a621b6d1e5b218a.webp#pic_center" alt="在这里插入图片描述"></p><h2 id="_1-访问者模式的定义" tabindex="-1">1. 访问者模式的定义 <a class="header-anchor" href="#_1-访问者模式的定义" aria-label="Permalink to &quot;1. 访问者模式的定义&quot;">​</a></h2><p>访问者模式（Visitor Pattern）允许一个或多个操作应用于一组对象上，分离对象的数据和行为。这种模式包含两个主要组成部分：访问者（Visitor）和元素（Element）。访问者实现操作，元素提供接口接受访问者。</p><h2 id="_2-实现访问者模式" tabindex="-1">2. 实现访问者模式 <a class="header-anchor" href="#_2-实现访问者模式" aria-label="Permalink to &quot;2. 实现访问者模式&quot;">​</a></h2><p>在Python中，实现访问者模式通常涉及创建一个访问者接口和一系列具体访问者类，以及定义元素接口和具体元素类。以下是访问者模式的一个简单实现示例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, abstractmethod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Visitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;访问者抽象类，定义访问元素的接口&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visit_element_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, element):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visit_element_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, element):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteVisitor1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Visitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体访问者，实现具体的访问行为&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visit_element_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, element):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteVisitor1: Processing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.operation_a()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visit_element_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, element):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ConcreteVisitor1: Processing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.operation_b()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;元素接口，声明接受操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @abstractmethod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, visitor):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteElementA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体元素A&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, visitor):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        visitor.visit_element_a(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation_a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Element A&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcreteElementB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;具体元素B&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, visitor):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        visitor.visit_element_b(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> operation_b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Element B&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 客户端代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elements </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ConcreteElementA(), ConcreteElementB()]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">visitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcreteVisitor1()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elements:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element.accept(visitor)</span></span></code></pre></div><h2 id="_3-访问者模式的应用实例" tabindex="-1">3. 访问者模式的应用实例 <a class="header-anchor" href="#_3-访问者模式的应用实例" aria-label="Permalink to &quot;3. 访问者模式的应用实例&quot;">​</a></h2><p>访问者模式在多种场景中非常有用，尤其适用于：</p><ul><li><strong>复杂对象结构</strong>：如文档对象模型（DOM）的处理。</li><li><strong>统计和报表</strong>：针对不同元素实现多种统计功能。</li><li><strong>序列化操作</strong>：根据对象结构进行序列化。</li></ul><h2 id="_4-优点和缺点-19" tabindex="-1">4. 优点和缺点 <a class="header-anchor" href="#_4-优点和缺点-19" aria-label="Permalink to &quot;4. 优点和缺点&quot;">​</a></h2><h3 id="优点-21" tabindex="-1">优点： <a class="header-anchor" href="#优点-21" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ul><li>增加新操作很容易，不需要修改结构。</li><li>将相关操作集中在一个访问者对象中。</li></ul><h3 id="缺点-21" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-21" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ul><li>增加新的元素类困难，需要给每个访问者增加新的方法。</li><li>可能违反封装，因为访问者通常需要访问元素的私有成分。</li></ul><h2 id="_5-总结-19" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结-19" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>访问者模式提供了一种灵活的方式来添加操作到复杂对象结构上，而无需修改这些结构。这使得系统更容易适应变化，但同时也可能导致代码更加复杂。正确使用这种模式可以有效地管理和扩展大型系统中的功能。</p><h1 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h1><p>设计模式是每个程序员都应该了解的重要概念之一。通过掌握Python中的设计模式，您将能够写出更加优雅和健壮的代码，提高代码的可读性和可维护性。希望本文对您有所帮助，如果您有任何疑问或建议，请随时在评论中提出，我们将竭诚为您解答。</p><hr>`,441),t=[h];function p(k,e,r,d,E,o){return a(),i("div",null,t)}const F=s(l,[["render",p]]);export{y as __pageData,F as default};
